---
title: "Benarkah Orang Indonesia Suka Dengerin Lagu Sedih?"
description: "Menganalisis Chart Top 50 Indonesia di akhir bulan Mei 2023 dalam Spotify"
title-block-banner: true
author: "Alif Dewantara"
date: "2023-05-28"
categories: 
  - Analisis Data
  - R
draft: true
---

```{r library, message=FALSE, warning=FALSE, include=FALSE}
library(tidyverse)
library(reactable)
library(reactablefmtr)
library(htmltools)
library(wordcloud2)
library(highcharter)
library(broom)
```

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

options(reactable.static = TRUE)
```

```{css ref.label="styles", echo=FALSE}
```

```{r ref.label="font_styles", echo=FALSE}
```

# Lorem Ipsum Dolor sit Amet

Jawaban singkatnya: **iya**. Pertanyaan dari judul di atas berangkat dari salah satu debat kusir di Twitter yang berujung pada pertikaian para penggemar penyanyi pop vs. penggemar lagu Indie. Banyak dari mereka yang mempertanyakan:

-   "*Kenapa sih orang kita suka dengerin lagu gjls ajg*

-   *"Apa ada yang salah dengan selera masyarakat?"*

-   *"Ini semua pasti salah kaum kapitalis yang memberikan upah murah pada masyarakat kecil*

-   "*Kita butuh Harmoko untuk jadi Menteri Penerangan lagi!"*

-   dsb.

Saya sebagai orang yang menghabiskan waktu **40 jam dalam sehari** untuk *dengerin* lagu, tentunya tertantang untuk menjawab pertanyaan semacam ini. Kebetulan, saya pernah membuat analisis riwayat pemutaran Spotify saya sejak pertama pakai Spotify akhir tahun 2017 sampai awal 2023 kemarin (yang *cuma* jadi draft doang di Tableau). Dengan pengalaman tersebut, saya cukup kompeten lah dalam melakukan analisis yang sama terhadap selera musik kebanyakan orang Indonesia.

Pembahasan ini akan menganalisis lagu yang disukai oleh orang Indonesia berdasarkan rincian fitur audio yang diambil dari [Spotify API](developer.spotify.com), dan analisis lirik yang diambil dari [Musixmatch](musixmatch.com). Mengapa dua? Jika kalian memperhatikan dengan seksama lagu yang kalian dengar serta liriknya, akan ditemukan beberapa lagu yang bernada ceria tetapi liriknya sedih, begitu pula sebaliknya. Kedua data tersebut saya ambil pada **Sabtu, 27 Mei 2023**.

## Analisis Fitur Audio Spotify

Selain menyediakan musik, Spotify juga berperan dalam membuat daftar putar (*playlist*) yang beberapa diantaranya diperbaharui sesuai selera masyarakat. Spotify juga menyusun *chart*, yakni urutan lagu yang sedang digemari oleh masyarakat yang dibuat berdasarkan negara-negaranya. *Playlist* yang digunakan dalam analisis kali ini adalah **Top 50 - Indonesia**, yakni *chart playlist* yang berisikan 50 lagu yang paling sering diputar di Indonesia yang diperbaharui setiap hari.

Saya mengambil sebanyak empat kolom *audio_features* yang disediakan Spotify API sebagai parameter angka yang dijadikan pengukuran *mood* dalam masing-masing lagu yang ada dalam *playlist*, yakni:

1.  `Valence`, mengacu pada tingkat positivitas atau negativitas emosional dalam sebuah lagu. Nilai *valence* berkisar antara 0,0 hingga 1,0, di mana 0,0 mewakili lagu yang sangat negatif atau sedih, sementara 1,0 mewakili lagu yang sangat positif atau bahagia. Misalnya, lagu-lagu pop yang ceria cenderung memiliki nilai *valence* yang tinggi.

2.  `Danceability`, mengindikasikan seberapa cocok sebuah lagu untuk berdansa. Nilai *danceability* berkisar antara 0,0 hingga 1,0, di mana 0,0 menunjukkan lagu yang sulit untuk berdansa, sementara 1,0 menunjukkan lagu yang sangat cocok untuk berdansa. Faktor seperti ritme, stabilitas tempo, kekuatan irama, dan jenis instrumen dapat mempengaruhi nilai *danceability* suatu lagu.

3.  `Acousticness`, adalah ukuran seberapa akustik sebuah lagu atau sejauh mana suara yang dihasilkan oleh instrumen musik secara alami, tanpa pengolahan elektronik atau manipulasi. Nilai *acousticness* berkisar antara 0,0 hingga 1,0, di mana 0,0 menunjukkan lagu yang sangat tidak akustik (lebih cenderung menggunakan instrumen elektronik), sementara 1,0 menunjukkan lagu yang sepenuhnya akustik (tidak ada instrumen elektronik).

4.  `Energy`, menggambarkan tingkat keaktifan dan intensitas suatu lagu. Nilai *energy* berkisar antara 0,0 hingga 1,0, di mana 0,0 menunjukkan lagu yang sangat tenang dan lembut, sementara 1,0 menunjukkan lagu yang sangat energik dan bersemangat. Faktor seperti kecepatan, volume, dan intensitas instrumen dapat mempengaruhi nilai *energy* sebuah lagu.

Berikut adalah tabel Audio Features dari 50 lagu dalam playlist Top 50 - Indonesia:

```{r message=FALSE, warning=FALSE}
audio_features <- read_csv("datasets/audio_features3.csv")
songTable <- reactable(audio_features%>%select(numCharts,image,artist,track,genre,valence,danceability, acousticness,energy,mood)%>%arrange(numCharts),
                       searchable = TRUE,
                       sortable = TRUE,
                       theme = reactableTheme(
                         cellStyle = list(display='flex',flexDirection='column',justifyContent='center'),
                         style = list(fontFamily='Roboto'),
                         backgroundColor = "#ffffff",
                         color = "#000000",
                         borderColor = "#303030"
                       ),
                       columns = list(
                         numCharts = colDef(name = "No.", width = 50),
                         image = colDef(name = "", cell = embed_img(height=50,width=50)),
                         artist = colDef(name = 'ARTIST', html = TRUE, cell = function(value,index) {
                           sprintf('<a style=text-decoration: none; color: #3dceee; href="%s" target="_blank">%s</a>',  audio_features$artist_url[index], value)
                         }),
                         track = colDef(name = 'TRACK', html = TRUE, cell = function(value,index) {
                           sprintf('<a style=text-decoration: none; color: #3dceee; href="%s" target="_blank">%s</a>', audio_features$song_url[index], value)
                         }),
                         genre = colDef(name = 'GENRE', align = 'center', width = 80),
                         valence = colDef(name = "VALENCE", style = color_scales(audio_features), align = "center", format = colFormat(digits = 2)),
                         danceability = colDef(name = "DANCEABILITY", style = color_scales(audio_features), align = "center", format = colFormat(digits = 2)),
                         acousticness = colDef(name = "ACOUSTICNESS", style = color_scales(audio_features), align = "center", format = colFormat(digits = 2)),
                         energy = colDef(name = "ENERGY", style = color_scales(audio_features), align = "center", format = colFormat(digits = 2)),
                         mood = colDef(name = "MOOD", align = 'center', width = 80)
                       ),
                       compact = TRUE,
                       class = "spotify-tbl")

# Memunculkan tabel
div(class = "spotify-table",
    div(class = "spotify-header",
        h2(class = "spotify-title", "Bagaimana Caramu Menggambarkan Lagu Kesukaanmu"),
        "Fitur-fitur yang ada dalam top chart 50 Spotify Indonesia"),
    songTable
    )
```

Jika kalian geser tabelnya ke kanan, kalian akan melihat bahwa ada kolom `Mood` yang terbagi menjadi empat *value*: 'Sad', 'Energetic', 'Happy', dan 'Calm'. Keempat *value* tersebut dihasilkan dari proses klasifikasi menggunakan *K-Nearest-Neighbor* berdasarkan empat parameter dalam *audio features* di atas.

Terima kasih pada **Fulan** yang sudah menyediakan kodenya.

```{r}
audio_features %>%
  count(mood) %>%
  arrange(desc(n))
```

Nah, berdasarkan tabel di atas, ditemukan bahwa ternyata dalam *playlist* Top 50 - Indonesia, **34** diantaranya adalah **lagu sedih**, lalu **8** trek lagu **bersemangat**, dan **8** trek lagu **bahagia**. Di sini sudah terlihat bahwa lagu sedih bahkan memiliki populasi dua kali lebih besar daripada gabungan antara lagu bahagia dan berenergi digabung!

Tetapi metode ini punya kekurangan, yaitu ia hanya menilai *mood* sebuah lagu berdasarkan suaranya. Hal ini bisa dilihat bahwa lagu Last Child yang berjudul **Duka**, justru diklasifikasikan sebagai lagu **bahagia** oleh perhitungan di atas. Walau memang jika kalian mendengarkan lagunya tanpa melihat liriknya, kalian akan mengetahui bahwa lagu ini dimainkan dengan semangat.

Facilisis volutpat est velit egestas. Suspendisse ultrices gravida dictum fusce ut. In dictum non consectetur a erat nam at lectus. Lobortis feugiat vivamus at augue eget arcu. Consectetur adipiscing elit ut aliquam purus. Massa eget egestas purus viverra accumsan in nisl nisi scelerisque. Pretium aenean pharetra magna ac placerat. Aliquet sagittis id consectetur purus ut faucibus pulvinar elementum integer. In nisl nisi scelerisque eu. Feugiat scelerisque varius morbi enim nunc faucibus a pellentesque. Maecenas sed enim ut sem viverra aliquet eget.

```{r}
audio_features %>%
  hchart('scatter',
         hcaes(x = valence,
               y = energy,
               group = genre))
```

## Analisis Lirik dengan NRCLex

Selanjutnya, saya melakukan analisis lirik. Ada berbagai macam cara untuk mendapatkan lirik lagu menggunakan Python, tetapi yang paling banyak dipakai adalah dengan mengekstrak lirik dari Genius API. Tetapi sayangnya, karena lagu dalam *playlist* ini sebagian besar berbahasa Indonesia, dan *database* lagu Indonesia di Genius masih belum bisa memenuhi seluruh lagu yang ada dalam *playlist*, membuat saya harus mencari cara lain.

Akhirnya, saya melihat Musixmatch, penyedia lirik lagu yang juga menyediakan lirik untuk Spotify (yang biasa kalian lihat di bawah layar). Namun, Musixmatch API hanya menyediakan 30% dari lirik lagu untuk pengguna *free*. Maka dari itu, saya menggunakan *package* dari pihak ketiga, yakni: **Syrics**. Dengan bantuan dari Ahura Mazda, dan Chat-GPT, akhirnya saya menemukan cara untuk mendapatkan lirik dari *package* tersebut.

Dalam analisis lirik ini, saya menggunakan **NRCLex**, sebuah *package* berlatarbelakang *Natural Language Processing* (NLP) yang dapat mengenali enam ekspresi emosi dari teks, yakni: **fear** (takut), **anger** (marah), **anticipation** (waspada), **trust** (percaya), **surprise** (terkejut), **sadness** (kesedihan), **disgust** (jijik), dan **joy** (bahagia). Selain itu, NRCLex juga dapat mengenali sentimen **positif** dan **negatif** dalam teks. Canggih kan?

```{r message=FALSE, warning=FALSE}
data_lyrics <- read_csv("datasets/data_lyrics.csv")
```

```{r message=FALSE, warning=FALSE}
lyricsTable <- reactable(data_lyrics%>%select(numCharts,image,artist,track,language,emot_trust,emot_joy,emot_surprise,emot_anger,emot_disgust,emot_fear)%>%arrange(numCharts),
                       searchable = TRUE,
                       sortable = TRUE,
                       theme = reactableTheme(
                         cellStyle = list(display='flex',flexDirection='column',justifyContent='center'),
                         style = list(fontFamily='Roboto'),
                         backgroundColor = "#ffffff",
                         color = "#000000",
                         borderColor = "#303030"
                       ),
                       columns = list(
                         numCharts = colDef(name = "No", width = 50),
                         image = colDef(name = "", cell = embed_img(height=50,width=50)),
                         artist = colDef(name = 'ARTIST', html = TRUE, cell = function(value,index) {
                           sprintf('<a style=text-decoration: none; color: #3dceee; href="%s" target="_blank">%s</a>',  data_lyrics$artist_url[index], value)
                         }),
                         track = colDef(name = 'TRACK', html = TRUE, cell = function(value,index) {
                           sprintf('<a style=text-decoration: none; color: #3dceee; href="%s" target="_blank">%s</a>', data_lyrics$song_url[index], value)
                         }),
                         language = colDef(name = 'LANGUAGE', align = 'center', width = 80),
                         emot_trust = colDef(name = "TRUST", style = color_scales(data_lyrics), align = "center", format = colFormat(digits = 2)),
                         emot_joy = colDef(name = "JOY", style = color_scales(data_lyrics), align = "center", format = colFormat(digits = 2)),
                         emot_surprise = colDef(name = "SURPRISE", style = color_scales(data_lyrics), align = "center", format = colFormat(digits = 2)),
                         emot_anger = colDef(name = "ANGER", style = color_scales(data_lyrics), align = "center", format = colFormat(digits = 2)),
                         emot_disgust = colDef(name = "DISGUST", style = color_scales(data_lyrics), align = "center", format = colFormat(digits = 2)),
                         emot_fear = colDef(name = "FEAR", style = color_scales(data_lyrics), align = "center", format = colFormat(digits = 2))
                       ),
                       compact = TRUE,
                       class = "emot-tbl")

# Memunculkan tabel
div(class = "spotify-table",
    div(class = "spotify-header",
        h2(class = "spotify-title", "Emosi Apa yang Disampaikan oleh Lagu Kesukaanmu?"),
        "Fitur-fitur emosi berdasarkan NLP NRCLex"),
    lyricsTable
    )
```

Memang untuk saat ini NRCLex (dan mungkin *package* analisis sentimen lainnya) masih belum mendukung Bahasa Indonesia. Maka untuk mengakalinya, lirik lagu-lagu dalam dataset yang bukan Bahasa Inggris saya terjemahkan terlebih dahulu menggunakan Google Translate. Tetapi ternyata hasilnya cukup memuaskan (walau saya masih heran sebenarnya *kenapa* hasil angkanya tak ada yang melebihi 0.5)

Suspendisse ac odio ante. Fusce tincidunt velit diam, pellentesque consectetur dolor tincidunt ut. Etiam eget sagittis libero. Mauris vel justo quam. Praesent gravida, nibh at pharetra faucibus, magna ligula semper ligula, quis dictum nulla erat nec lectus. Suspendisse potenti. Ut at vehicula massa. Duis eleifend sed ipsum non mollis. Maecenas ultrices justo sit amet rutrum pretium. Cras pharetra nibh felis, suscipit finibus libero condimentum non. Phasellus tristique eleifend lorem eu blandit. Proin sit amet turpis nec libero porttitor molestie quis sed tellus. Praesent quis congue nisi.

```{r}
data_lyrics %>% hchart('scatter', hcaes(x = emot_positive, y = emot_negative, group = language))
```

Amet dictum sit amet justo. Iaculis urna id volutpat lacus laoreet non curabitur gravida. Dui ut ornare lectus sit amet est placerat in egestas. Id interdum velit laoreet id donec ultrices tincidunt. Sit amet tellus cras adipiscing enim eu turpis egestas pretium. Enim diam vulputate ut pharetra sit amet aliquam. Malesuada fames ac turpis egestas sed. Nisi est sit amet facilisis. Duis tristique sollicitudin nibh sit amet commodo. Quisque non tellus orci ac auctor augue. Massa sapien faucibus et molestie ac feugiat sed lectus. Ridiculus mus mauris vitae ultricies. Id aliquet lectus proin nibh nisl.

## Diam phasellus vestibulum lorem

Diam phasellus vestibulum lorem sed risus ultricies tristique. Scelerisque eu ultrices vitae auctor eu augue ut. Sem fringilla ut morbi tincidunt augue interdum. Euismod in pellentesque massa placerat duis ultricies lacus sed. Nec dui nunc mattis enim. Tortor at risus viverra adipiscing at in tellus integer feugiat. Pellentesque elit ullamcorper dignissim cras tincidunt lobortis feugiat vivamus. Sollicitudin tempor id eu nisl nunc mi ipsum.

```{r message=FALSE, warning=FALSE}
vect_words <- read_csv("datasets/vect_words.csv")
vect_words_long <- gather(vect_words, key = "language", value = "count", -words)
```

```{r include=FALSE, echo=FALSE}
#wordcloud2(vect_words_long, size = 1, color = language)
```

```{r}
vect_words_id = vect_words %>%
  select(words, id) %>%
  filter(id >= 1)
wc_id <- wordcloud2(vect_words_id, size = 1)
#div(class = "spotify-table",
#    div(class = "spotify-header",
#        h2(class = "spotify-title", "Kata-Kata Apa Saja yang Sering Muncul pada Lagu Indonesia"),
#        "Diambil dari Musixmatch."),
#    wc_id
#    )
wc_id
```

```{r}
vect_words_en = vect_words %>%
  select(words, en) %>%
  filter(en >= 1)
wc_en <- wordcloud2(vect_words_en, size = 1)
wc_en
```

```{r}
vect_words_ko <- vect_words %>%
  select(words, ko) %>%
  filter(ko >= 1)
wc_ko <- wordcloud2(vect_words_ko, size = 1)
wc_ko
```

Dictumst vestibulum rhoncus est pellentesque elit ullamcorper dignissim cras tincidunt. Lacus laoreet non curabitur gravida arcu ac tortor. Pulvinar etiam non quam lacus suspendisse faucibus interdum posuere lorem. Ipsum a arcu cursus vitae. Aliquam nulla facilisi cras fermentum odio eu feugiat pretium. Amet dictum sit amet justo donec enim diam vulputate ut. Sed elementum tempus egestas sed. Amet volutpat consequat mauris nunc congue nisi vitae suscipit tellus. Quis blandit turpis cursus in hac. Suspendisse potenti nullam ac tortor vitae purus faucibus ornare suspendisse.

```{css styles, eval=FALSE}
.spotify-table {
  margin: 0 auto;
  width: 100%;
  border: 3px dashed black;
  border-radius: 5px;
  margin-bottom: 25px;
}

.spotify-header {
  margin: 1.125rem 0;
  font-size: 1rem;
  text-align: center;
}

.spotify-title {
  font-size: 1.25rem;
  font-weight: 600;
}

.spotify-tbl, .emot-tbl {
  font-size: 0.875rem;
  line-height: 1.125rem;
}
```
