---
title: "Analisis Spotify Top 50 Indonesia  - Pengambilan Data"
format: 
  html: 
    df-print: paged
description: |
  Memahami penggunaan Spotify saya selama tahun 2022, dan tahun-tahun sebelumnya.
author: "Alif Dewantara"
title-block-banner: true
date: "2023-03-17"
categories: 
  - Analisis Data
  - Python
  - Musik
comments: 
  utterances: 
    repo: quarto-dev/quarto-web
    theme: github-light
    issue-term: title
image: "spotify2022.png"
---

# Bab 1A, Pengambilan Data dari Spotify (*Audio Features*)

```{python load_module}
# Memuat modul
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import pandas as pd
import requests
import shutil
```

```{python write_api}
# Ambil client_id dan client_secret dari developer.spotify.com
client_id = '3ff80dfa932f42ccba937689112ebaf8'
client_secret = 'b222a7c17fda476aa56057b10f263a7d'
```

```{python set_api}
# Mengatur Spotify API
sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(
  client_id=client_id,
  client_secret=client_secret),
  requests_timeout=30)
```

## Mengambil Data Playlist Top Songs - Indonesia

```{python get_pl}
# Membuat fungsi utk mendapatkan id playlist
def get_playlist_id(playlist_name):
    results = sp.search(q=playlist_name, type='playlist')
    ids = [playlist.get('id') for playlist in results.get('playlists').get('items')]
    return ids[0]

# Membuat fungsi utk mendapatkan rincian lagu
def get_playlist_tracks(playlist_id, n_tracks):
    data = pd.DataFrame()
    #spotify API sets a default limit of 100 tracks, to get all we need to invoke offset
    for i in range(0,n_tracks,100):
        results = sp.playlist_tracks(playlist_id,limit=100, offset=i)
        #shape json into dataframe
        track_ids = [track.get('track').get('id') for track in results.get('items')]
        df = pd.DataFrame()
        df['id'] = track_ids
        df['track'] = [track.get('track').get('name') for track in results.get('items')]
        df['artist_id'] = [track.get('track').get('artists')[0].get('id') for track in results.get('items')]
        df['artist'] = [track.get('track').get('artists')[0].get('name') for track in results.get('items')]
        df['album_id'] = [track.get('track').get('album').get('id') for track in results.get('items')]
        df['album'] = [track.get('track').get('album').get('name') for track in results.get('items')]
        df['release_date'] = [track.get('track').get('album').get('release_date') for track in results.get('items')]
      # df['genre'] = [track.get('track').get('album').get('genre') for track in results.get('items')]
        df['link'] = [track.get('track').get('href') for track in results.get('items')]
        #get audio features, merge with df
        track_features = sp.audio_features(track_ids)
        df_features = pd.DataFrame.from_dict(track_features)
        df = df.merge(df_features, on='id', how='left')
        #merge with data
        data = pd.concat([data,df])
    return data
```

```{python cnt_pl}
# Mengambil data playlist Top 50 Indonesia
df_songs = get_playlist_tracks('37i9dQZEVXbIZK8aUquyx8',50)
```

```{python pl_head}
df_songs.head()
```

```{python simpan_pl}
df_songs.to_csv('datasets/audio_features.csv')
```

## Mengambil Data Artis

```{python data_artis}
# Membuat fungsi utk mendapatkan data artis
def get_artist_details(artist_id):
    d = {}
    results = sp.artist(artist_id)
    d['artist_id'] = artist_id
    d['artist'] = results.get('name')
    if len(results.get('images'))>0:
        d['image'] = results.get('images')[0].get('url')
    else:
        d['image'] = ''
    d['genres'] = str(results.get('genres'))
    d['popularity'] = results.get('popularity')
    d['link'] = results.get('href')
    if len(results.get('followers'))>0:
        d['followers'] = results.get('followers').get('total')
    else:
        d['followers'] = None
    return d
```

```{python artists}
artists = list(set([artist for artist in df_songs['artist_id']]))
artist_data = []
for artist in artists:
    data = get_artist_details(artist)
    artist_data.append(data)
```

```{python artis_df}
# Membuat dataframe data artis dan menyimpannya dalam .csv
df_artists = pd.DataFrame(artist_data)
df_artists.head()
```

```{python simpan_artis}
# Menyimpan data artis ke dalam .csv
df_artists.to_csv('datasets/artists.csv')
```

# Bab 1B.a, Pengambilan Data Lirik dari Musixmatch

```{python impor_lirik}
lirik_top50 = pd.read_csv('datasets/lirik_top50.csv')
lirik_top50.head()
```

## Mengenali dan Menerjemahkan Lirik

### Mengenali bahasa

```{python}
# Impor modul
import spacy
from spacy.language import Language
from spacy_langdetect import LanguageDetector
```

```{python}
# Membuat fungsi mengenali bahasa
@Language.factory("language_detector")
def get_lang_detector(nlp, name):
   return LanguageDetector()
```

```{python}
nlp = spacy.load("en_core_web_sm")
nlp.add_pipe('language_detector', last=True)
print(nlp("biwir beureum-beureum jawir hayam")._.language)
```

```{python}
# Membuat fungsi mengenali bahasa kolom
def get_language(text):
  lang = nlp(text)._.language['language']
  return(lang)
```

```{python}
lirik_top50['lang'] = lirik_top50['lyrics'].apply(get_language)
```

```{python}
lirik_top50.head()
```

### Menerjemahkan lirik

```{python}
# Impor modul
from googletrans import Translator
translator = Translator()
```

```{python}
translator = Translator()  # initalize the Translator object
df=['How are you doing today', 'Good morning, How are you ','I hope you are doing great']
translations = translator.translate(df, dest='hi')
for translation in translations:  # print every translation
    print(translation.text)
```

```{python}
translator.translate('Pada mulanya adalah firman', dest='en')
```

```{python}
lirik_top50['translated'] = df['lyrics'].apply(lambda x: translator.translate(x, dest='en').text)
```

```{python}
lirik_top50.to_csv('datasets/lirik_top50_lang.csv')
```

# Bab 1B.b, Pengambilan Data Lirik dari Genius

```{python mengimpor_modul}
# Mengimpor modul
from lyricsgenius import Genius
from requests.exceptions import Timeout
import json
```

```{python memuat_token}
token = 'CBz5kXqTsseg-LNqSrGv4VwKgs48RqQiHYALieK4ncX4AKNLaVOvm25HI-gqNnKO'
genius = Genius(token,skip_non_songs=True,
          excluded_terms=["(Remix)", "(Live)"],
          timeout=60,
          retries=2, 
          verbose=False)
```

```{python memuat_data_pl}
# Memuat data playlist
songs = pd.read_csv('datasets/audio_features.csv')
songs.set_index('id',inplace=True)
songs.head(5)
```

```{python data_lirik}
# Mengambil data lirik
data_lyrics = []
for index in songs.index:
    data = pd.DataFrame()
    track = songs.loc[index]['track']
    artist = songs.loc[index]['artist']
    res = genius.search_song(title=track, artist=artist)
    if res != None:
        lyrics = res.lyrics
        data = {'id': index, 'track': track, 'artist': artist, 'lyrics': lyrics}
        data_lyrics.append(data)

# Menampilkan 5 data lirik
df_lyrics = pd.DataFrame(data_lyrics)
df_lyrics.head(5)
```

```{python save_genius}
# Menyimpan data lirik genius
df_lyrics.to_csv('datasets/lyrics_genius.csv')
```
