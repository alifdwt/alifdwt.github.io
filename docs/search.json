[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Halo semua! Perkenalkan, saya Alif!\nLatar belakang pendidikan saya adalah Ilmu Sejarah. Saya sedang mencoba mempelajari teknologi di bidang data."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n\n\n\n\n\n\n\n\n\n\nStatistik Penumpang Transportasi Jakarta Tahun 2021\n\n\n8 min\n\n\n\nAnalisis Data\n\n\nR\n\n\n\nMengetahui statistik moda transportasi jalanan di DKI Jakarta.\n\n\n\nFeb 13, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVisualisasi Sejarah Para Peraih Penghargaan Nobel\n\n\n7 min\n\n\n\nAnalisis Data\n\n\nR\n\n\n\nMari kita menelaah orang-orang hebat dari 100 tahun yang lalu hingga sekarang.\n\n\n\nFeb 9, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPangsa Pasar Aplikasi Android di Google Play\n\n\n10 min\n\n\n\nAnalisis Data\n\n\nPython\n\n\n\nMenganalisa dan mencari strategi pemasaran aplikasi di Google Play.\n\n\n\nFeb 6, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDokter Semmelweis dan Temuan dalam Mencuci Tangan\n\n\n4 min\n\n\n\nAnalisis Data\n\n\nPython\n\n\n\nMengetahui dan menganalisa metode cuci tangan di Rumah Sakit Umum Vienna di abad ke-19.\n\n\n\nFeb 5, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSaya membuat Spotify Wrapped dengan R - Part 1\n\n\n3 min\n\n\n\nAnalisis Data\n\n\nR\n\n\n\nMemahami penggunaan Spotify saya selama tahun 2022, dan tahun-tahun sebelumnya.\n\n\n\nJan 23, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDestinasi Wisata di Kota Bandung - Part 1\n\n\n3 min\n\n\n\nAnalisis Data\n\n\nR\n\n\n\nMenganalisa Destinasi Wisata di Bandung pada Oktober 2021.\n\n\n\nJan 23, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Handwashing/index.html",
    "href": "posts/Handwashing/index.html",
    "title": "Dokter Semmelweis dan Temuan dalam Mencuci Tangan",
    "section": "",
    "text": "Dr. Ignaz Semmelweis\n\n\nDokter Semmelweis lahir di Austria-Hungaria pada tahun 1818, dan aktif bekerja di Rumah Sakit Umum Vienna. Saat itu, Dr. Semmelweis menemukan adanya penyakit yang sering ditemuinya di rumah sakit: childbed fever (demam kasur), yakni penyakit yang disebabkan oleh infeksi bakteri yang menyerang saluran reproduksi perempuan setelah melahirkan atau keguguran. Ia bekerja keras mencari cara untuk mengatasi penyakit ini, sebab pada tahun 1840-an, 10% wanita yang melahirkan di Rumah Sakit Umum Vienna meninggal karena terinfeksi. Dr. Semmelweis sangat memikirkan hal ini karena ia tahu penyebab utama demam tersebut: tangan-tangan para dokter yang telah terkontaminasi saat memindahkan bayi. Sayangnya, staf rumah sakit saat itu tak ada yang mengindahkan sarannya untuk mencuci tangan!\nMaka di sini, kita akan bersama-sama menganalisa kembali data yang membuat Dr. Semmelweis menemukan pentingnya mencuci tangan. Kita bisa memulainya dengan melihat data yang membuat Semmelweis menyadari bahwa ada yang salah dalam prosedur Rumah Sakit Umum Vienna.\n\n# import modul\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Membaca datasets/yearly_deaths_by_clinic.csv ke dalam yearly\nyearly = pd.read_csv('datasets/yearly_deaths_by_clinic.csv')\n\n# Print yearly\nprint(yearly)\n\n    year  births  deaths    clinic\n0   1841    3036     237  clinic 1\n1   1842    3287     518  clinic 1\n2   1843    3060     274  clinic 1\n3   1844    3157     260  clinic 1\n4   1845    3492     241  clinic 1\n5   1846    4010     459  clinic 1\n6   1841    2442      86  clinic 2\n7   1842    2659     202  clinic 2\n8   1843    2739     164  clinic 2\n9   1844    2956      68  clinic 2\n10  1845    3241      66  clinic 2\n11  1846    3754     105  clinic 2"
  },
  {
    "objectID": "posts/Handwashing/index.html#proporsi-angka-kematian",
    "href": "posts/Handwashing/index.html#proporsi-angka-kematian",
    "title": "Dokter Semmelweis dan Temuan dalam Mencuci Tangan",
    "section": "Proporsi angka kematian",
    "text": "Proporsi angka kematian\nTabel di atas tadi memberi informasi terkait angka para ibu yang melahirkan (births) di dua klinik (clinic) milik Rumah Sakit Vienna antara tahun 1841 sampai 1846 (year). Kalian mungkin sadar bahwa proses melahirkan di tahun tersebut sangat riskan, dan angka kematian (deaths) ibu yang melahirkan, sebagian besar terjadi akibat demam kasur.\nKita bisa lihat dengan lebih jelas jika kita melihatnya dari proporsi kematian para ibu berdasarkan angka ibu yang melahirkan (proportion_deaths). Mari kita fokus pada proporsi kematian di Klinik 1.\n\n# Mengkalkulasi proporsi kematian per angka kelahiran\nyearly['proportion_deaths'] = yearly['deaths']/yearly['births']\n\n# Ekstrak data tahunan dari Klinik 1 ke dalam yearly1 dan Klinik 2 ke dalam yearly2\nyearly1 = yearly[yearly.clinic == 'clinic 1']\nyearly2 = yearly[yearly.clinic == 'clinic 2']\n\n# Print out yearly1\nprint(yearly1)\n\n   year  births  deaths    clinic  proportion_deaths\n0  1841    3036     237  clinic 1           0.078063\n1  1842    3287     518  clinic 1           0.157591\n2  1843    3060     274  clinic 1           0.089542\n3  1844    3157     260  clinic 1           0.082357\n4  1845    3492     241  clinic 1           0.069015\n5  1846    4010     459  clinic 1           0.114464"
  },
  {
    "objectID": "posts/Handwashing/index.html#kematian-di-klinik",
    "href": "posts/Handwashing/index.html#kematian-di-klinik",
    "title": "Dokter Semmelweis dan Temuan dalam Mencuci Tangan",
    "section": "Kematian di klinik",
    "text": "Kematian di klinik\nJika kita membuat memvisualisasikan proportion_deaths kedua klinik dalam line chart, kita akan melihat adanya suatu pola.\n\n# Membuat plot proporsi kematian per tahun di kedua klinik\n\nax = yearly1.plot(x='year', y='proportion_deaths', label='clinic 1')\nyearly2.plot(x='year', y='proportion_deaths', label='clinic 2', ax=ax)\nax.set_ylabel('Proportion deaths')\nplt.show()"
  },
  {
    "objectID": "posts/Handwashing/index.html#kampanye-mencuci-tangan-dimulai",
    "href": "posts/Handwashing/index.html#kampanye-mencuci-tangan-dimulai",
    "title": "Dokter Semmelweis dan Temuan dalam Mencuci Tangan",
    "section": "Kampanye mencuci tangan dimulai!",
    "text": "Kampanye mencuci tangan dimulai!\nDari plot di atas pasti kalian bertanya “Mengapa ada lebih banyak kematian terjadi di klinik 1?”. Dr. Semmelweis pun melihat hal serupa dan cukup kebingungan. Padahal, perbedaan antara kedua klinik itu kelihatannya tak begitu penting: Orang yang bertugas di klinik 1 didominasi oleh mahasiswa/i kedokteran, sedangkan di klinik 2 didominasi oleh mahasiswa/i kebidanan. Perbedaan keduanya adalah jika mahasiswa/i kebidanan hanya mengurusi para ibu hamil dan melahirkan, mahasiswa/i kedokteran juga harus mengurusi ruang otopsi.\nDr. Semmelweis mulai mencurigai mayat-mayat yang ada di ruang otopsi, yang mungkin saja menjadi sumber bakteri yang tersebar melalui tangan-tangan kotor mahasiswa/i kedokteran. Dalam keadaan linglung dan pasrah karena menghadapi angka kematian yang tetap tinggi, Dr. Semmelweis pun membuat keputusan: “Cucilah tangan kalian!”.\nPerlu diketahui bahwa kesadaran mencuci tangan di masa itu tidak sebaik sekarang. Perintah Dr. Semmelweis tersebut tentu saja dianggap kontroversial dan aneh. Penduduk Vienna pada masa itu juga belum tahu tentang adanya bakteri.\nNah, mari kita sekarang membuka data yang baru, yakni data bulanan dari klinik 1 untuk melihat apakah kampanye cuci tangan ini memberikan efek.\n\n# Membaca datasets/monthly_deaths.csv ke dalam monthly\nmonthly = pd.read_csv('datasets/monthly_deaths.csv', parse_dates=['date'])\n\n# Hitung proporsi kematian per angka kelahiran\nmonthly['proportion_deaths'] = monthly['deaths']/monthly['births']\n\n# Print out lima baris awal monthly\nprint(monthly.head())\n\n        date  births  deaths  proportion_deaths\n0 1841-01-01     254      37           0.145669\n1 1841-02-01     239      18           0.075314\n2 1841-03-01     277      12           0.043321\n3 1841-04-01     255       4           0.015686\n4 1841-05-01     255       2           0.007843"
  },
  {
    "objectID": "posts/Handwashing/index.html#efek-mencuci-tangan",
    "href": "posts/Handwashing/index.html#efek-mencuci-tangan",
    "title": "Dokter Semmelweis dan Temuan dalam Mencuci Tangan",
    "section": "Efek mencuci tangan",
    "text": "Efek mencuci tangan\nData di atas sudah berhasil dimuat, maka kita dapat melihat proporsi kematian di tahun tersebut. Dalam plot ini kita tak akan memberi tanda tentang kapan kampanye cuci tangan ini dimulai, tetapi kampanye tersebut telah mengurangi angka kematian dengan sangat signifikan sehingga kalian bisa tahu hanya dengan melihat plot di bawah.\n\n# Membuat plot proporsi kematian\nax = monthly.plot(x='date', y='proportion_deaths')\nax.set_ylabel('Proportion deaths')\nplt.show()\n\n\n\n\nProporsi kematian menurun drastis pada musim panas (Juni) 1847, yakni saat kampanye cuci tangan dimulai oleh Dr. Semmelweis\nEfek mencuci tangan akan lebih terlihat jelas jika kita membuat grafik seperti ini.\n\n# Tanggal dimulainya kampanye cuci tangan\nhandwashing_start = pd.to_datetime('1847-06-01')\n\n# Memisahkan monthly ke sebelum dan sesudah handwashing_start\nbefore_washing = monthly[monthly.date < handwashing_start]\nafter_washing = monthly[monthly.date >= handwashing_start]\n\n# Membuat plot proporsi kematian sebelum dan sesudah mencuci tangan\nax = before_washing.plot(x='date', y='proportion_deaths', label='Before handwashing')\nafter_washing.plot(x='date', y='proportion_deaths', label='After handwashing', ax=ax)\nax.set_ylabel('Proportion deaths')\nplt.show()\n\n\n\n\nGrafik di atas menunjukkan bahwa mencuci tangan memberikan efek yang luar biasa. Seluar biasa apakah cuci tangan mengurangi rata-rata proporsi kematian per bulan?\n\n# Rata-rata perbedaan proporsi kematian saat kampanye cuci tangan\nbefore_proportion = before_washing.proportion_deaths\nafter_proportion = after_washing.proportion_deaths\nmean_diff = after_proportion.mean() - before_proportion.mean() \nprint(mean_diff)\n\n-0.08395660751183336"
  },
  {
    "objectID": "posts/Handwashing/index.html#analisis-bootstrap-data-cuci-tangan-semmelweis",
    "href": "posts/Handwashing/index.html#analisis-bootstrap-data-cuci-tangan-semmelweis",
    "title": "Dokter Semmelweis dan Temuan dalam Mencuci Tangan",
    "section": "Analisis Bootstrap Data Cuci Tangan Semmelweis",
    "text": "Analisis Bootstrap Data Cuci Tangan Semmelweis\nKampanye cuci tangan telah mengurangi angka kematian secara signifikan! Jika sebelumnya rata-rata proporsi kematian adalah 10%, kini berkurang sebanyak 8% menjadi 2%.\nAgar kalian mendapatkan gambaran terkait seberapa penting mencuci tangan dalam mengurangi kematian, kita dapat membuat confidence interval.\n\nfrom numpy import percentile\n# A bootstrap analysis of the reduction of deaths due to handwashing\nboot_mean_diff = []\nfor i in range(3000):\n    boot_before = before_proportion.sample(frac=1, replace=True)\n    boot_after = after_proportion.sample(frac=1, replace=True)\n    boot_mean_diff.append(boot_after.mean() - boot_before.mean())\n\n# Calculating a 95% confidence interval from boot_mean_diff \nconfidence_interval = percentile(boot_mean_diff, [2.5, 97.5])\nprint(confidence_interval)\n\n[-0.10145617 -0.06734784]"
  },
  {
    "objectID": "posts/Handwashing/index.html#nasib-dr.-semmelweis",
    "href": "posts/Handwashing/index.html#nasib-dr.-semmelweis",
    "title": "Dokter Semmelweis dan Temuan dalam Mencuci Tangan",
    "section": "Nasib Dr. Semmelweis",
    "text": "Nasib Dr. Semmelweis\nDari penjelasan di atas kita telah tahu bahwa mencuci tangan telah mengurangi proporsi angka kematian antara 6,7 sampai 10 persen, berdasarkan 95% confidence interval. Maka seharusnya Semmelweis memiliki landasan yang kuat bahwa mencuci tangan, walaupun sederhana, tetapi merupakan prosedur sangat efektif yang dapat menyelamatkan banyak orang.\nSayangnya, walaupun telah banyak bukti tersebut, teori Semmelweis yang mengatakan bahwa demam tidur disebabkan oleh suatu ‘zat’ (yang kita ketahui sekarang sebagai bakteri) dari mayat-mayat ruang otopsi, dianggap konyol oleh ilmuan saat itu. Asosiasi kesehatan saat itu sebagian besar menolak penemuan Semmelweis dan bahkan pada 1849, ia dipaksa untuk meninggalkan pekerjaaannya di Rumah Sakit Umum Vienna secara permanen.\nSalah satu alasannya adalah karena pada saat itu statistika dan argumen yang berlandaskan statistika masih tidak umum di kalangan ilmu kesehatan. Semmelweis hanya mempublikasikan data mentah dalam bentuk tabel, tetapi ia tidak menunjukkan grafik atau confidence interval. Jika saja Semmelweis memiliki akses melakukan analisis seperti yang kita lakukan, ia bisa saja lebih berhasil mengampanyekan para dokter di Vienna untuk mencuci tangan.\n\n\n\n\n\n\nImportant\n\n\n\nTulisan ini adalah salah satu hasil kerja saya saat belajar dalam career path Data Scientist with Python di Datacamp.\n\n\nSalam Maria, penuh rahmat, Tuhan sertamu."
  },
  {
    "objectID": "posts/Nobel of Prizes/NobelPrizes.html",
    "href": "posts/Nobel of Prizes/NobelPrizes.html",
    "title": "Visualisasi Sejarah Para Peraih Penghargaan Nobel",
    "section": "",
    "text": "Penghargaan Nobel mungkin adalah salah satu penghargaan paling terkenal di dunia ilmu pengetahuan. Selain kehormatan, gengsi, dan nominal uang yang tidak sedikit, penerima Nobel juga mendapatkan medali emas yang terdapat cetakan Alfred Nobel (1833 - 1896), sang pencetus penghargaan tersebut. Setiap tahunnya penghargaan tersebut diberikan pada ilmuwan dan para sarjana di bidang kimia, sastra, fisika, psikologi atau kesehatan, ekonomi, dan perdamaian. Penghargaan Nobel pertama kali diberikan pada tahun 1901, dan saat itu penghargaan tersebut sangatlah Eropa-sentris dan sebagian besar didapatkan oleh pria. Benarkah demikian?\n\n\n\nPenghargaan Nobel (Sumber: cruxnow.com)\n\n\nMari kita cari tahu! Yayasan Nobel telah membuat dataset yang berisi semua pemenang penghargaan dari 1901 sampai 2022. Pertama-tama, kita akan memuat dataset yang akan kita pakai:\n\n# Memuat library\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyverse)\n\n── Attaching packages\n───────────────────────────────────────\ntidyverse 1.3.2 ──\n\n\n✔ ggplot2 3.3.6     ✔ purrr   0.3.5\n✔ tibble  3.1.8     ✔ stringr 1.4.1\n✔ tidyr   1.2.1     ✔ forcats 0.5.2\n✔ readr   2.1.3     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(ggplot2)\n\n# Membaca dataset Nobel Prize\nnobelkotor <- read.csv('datasets/nobel-prize-laureates.csv')\nglimpse(nobelkotor)\n\nRows: 989\nColumns: 21\n$ Id                   <int> 95, 106, 112, 113, 138, 143, 144, 149, 150, 152, …\n$ Firstname            <chr> \"Leon N.\", \"Samuel C.C.\", \"Robert Woodrow\", \"Shel…\n$ Surname              <chr> \"Cooper\", \"Ting\", \"Wilson\", \"Glashow\", \"Friedman\"…\n$ Born                 <chr> \"1930-02-28\", \"1936-01-27\", \"1936-01-10\", \"1932-1…\n$ Died                 <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ Born.country         <chr> \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", …\n$ Born.country.code    <chr> \"US\", \"US\", \"US\", \"US\", \"US\", \"US\", \"US\", \"US\", \"…\n$ Born.city            <chr> \"New York NY\", \"Ann Arbor MI\", \"Houston TX\", \"New…\n$ Died.country         <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ Died.country.code    <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ Died.city            <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ Gender               <chr> \"male\", \"male\", \"male\", \"male\", \"male\", \"male\", \"…\n$ Year                 <int> 1972, 1976, 1978, 1979, 1990, 1993, 1993, 1996, 1…\n$ Category             <chr> \"Physics\", \"Physics\", \"Physics\", \"Physics\", \"Phys…\n$ Overall.motivation   <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ Motivation           <chr> \"\\\"for their jointly developed theory of supercon…\n$ Organization.name    <chr> \"Brown University\", \"Massachusetts Institute of T…\n$ Organization.city    <chr> \"Providence RI\", \"Cambridge MA\", \"Holmdel NJ\", \"C…\n$ Organization.country <chr> \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", …\n$ Geo.Shape            <chr> \"{\\\"coordinates\\\": [[[[-155.60651897, 20.13795556…\n$ Geo.Point.2D         <chr> \"45.68753333949257, -112.49433391594603\", \"45.687…"
  },
  {
    "objectID": "posts/Nobel of Prizes/NobelPrizes.html#pembersihan-data-data-cleaning-dan-membenarkan-tipe-data",
    "href": "posts/Nobel of Prizes/NobelPrizes.html#pembersihan-data-data-cleaning-dan-membenarkan-tipe-data",
    "title": "Visualisasi Sejarah Para Peraih Penghargaan Nobel",
    "section": "Pembersihan Data (Data Cleaning) dan Membenarkan Tipe Data",
    "text": "Pembersihan Data (Data Cleaning) dan Membenarkan Tipe Data\nSebelum melakukan Exproratory Data Analysis (EDA), hal yang biasa dilakukan oleh seorang analis adalah melakukan pembersihan data dan membenarkan tipe data:\n\n# Membersihkan data yang takkan dipakai, memisahkan Geo.Shape menjadi Latitude dan Longitude\nnobelbersih2 <- subset(nobelkotor, select = -c(Overall.motivation, Geo.Shape)) %>%\n  arrange(Id) %>%\n  separate(Geo.Point.2D, into = c('Lat', 'Lon'), sep = \",\")\n\nWarning: Expected 2 pieces. Missing pieces filled with `NA` in 358 rows [7, 8,\n10, 13, 20, 21, 22, 34, 35, 40, 41, 45, 52, 53, 55, 56, 61, 94, 99, 100, ...].\n\n# Menghapus sisa spasi yang ada di dalam kolom\nnobelbersih2$Lat <- trimws(nobelbersih2$Lat)\nnobelbersih2$Lon <- trimws(nobelbersih2$Lon)\n\n\n# Mengubah tipe data Born (tanggal lahir) dan Died (tanggal wafat) menjadi tipe Date (tanggal)\nnobel <- nobelbersih2 %>%\n  mutate_at(c('Born', 'Died'), as.Date)\n\n# Mengubah string kosong menjadi NA\nnobel[nobel == ''] <- NA\n\n\n# Memuat file dunia\nworld_country <- read.csv('datasets/world_country_and_usa_states_latitude_and_longitude_values.csv')\n\n# Menggabungkan kedua file\nworld_country <- subset(world_country, select = -c(usa_state_code, usa_state_latitude, usa_state_longitude, usa_state))\n\n# Menghilangkan values yang kosong\nworld_country <- drop_na(world_country)"
  },
  {
    "objectID": "posts/Nobel of Prizes/NobelPrizes.html#siapa-saja-peraih-penghargaan-nobel",
    "href": "posts/Nobel of Prizes/NobelPrizes.html#siapa-saja-peraih-penghargaan-nobel",
    "title": "Visualisasi Sejarah Para Peraih Penghargaan Nobel",
    "section": "Siapa Saja Peraih Penghargaan Nobel?",
    "text": "Siapa Saja Peraih Penghargaan Nobel?\nDengan melihat lima orang awal pemenang penghargaan, atau yang biasa disebut sebagai Nobel laureates, kita dapat melihat seseorang: Wilhelm Conrad Rontgen. Mungkin kita langsung tahu apa kontribusi beliau dalam ilmu pengetahuan. Yep, ia adalah penemu mesin X-ray, yang biasa disebut oleh masyarakat sebagai mesin Rontgen (ronsen). Menariknya, kita bisa lihat bahwa semua pemenang Nobel tahun 1901 berasal dari Eropa. Lalu, bagaimana dengan pemenang Nobel dari 1901 sampai 2022?\n\n# Menampilkan jumlah peraih Nobel\nnrow(nobel)\n\n[1] 989\n\n\n\n# Menampilkan angka pemenang Nobel berdasarkan jenis kelamin\nnobel %>%\n  count(Gender, sort = TRUE)\n\n\n\n  \n\n\n\n\n# Menyatukan data Nobel dan world_country untuk mendapatkan tempat lahir peraih Nobel lebih akurat\nnobel_country <- merge(nobel, world_country, by.x='Born.country.code', by.y='country_code', all.x = TRUE)\n\n# Menampilkan angka pemenang Nobel berdasarkan negara asal\nnobel_country_count <- nobel_country %>%\n  count(country, sort = TRUE) %>%\n  mutate(country = recode(country, 'United States' = 'USA'))\nhead(nobel_country_count, 10)\n\n\n\n  \n\n\n\n\n# Mendapatkan data dunia\nworld_map <- map_data(\"world\")\n\n# Membuat peta para peraih Nobel berdasarkan negara\nggplot(nobel_country_count, aes(map_id = country)) +\n  geom_map(aes(fill = n), map = world_map) +\n  expand_limits(x=world_map$long, y=world_map$lat) +\n  labs(title = \"Peta Tempat Lahir Para Peraih Nobel\")"
  },
  {
    "objectID": "posts/Nobel of Prizes/NobelPrizes.html#ada-indonesia-coy",
    "href": "posts/Nobel of Prizes/NobelPrizes.html#ada-indonesia-coy",
    "title": "Visualisasi Sejarah Para Peraih Penghargaan Nobel",
    "section": "Ada Indonesia Coy!",
    "text": "Ada Indonesia Coy!\nMenariknya, jika kita melakukan proses menyatukan data Nobel dan World_country di atas, kita akan mendapatkan tempat tanggal lahir negara dalam konteks sosial-politik zaman sekarang. Sebenarnya, hal ini dilakukan untuk mempermudah pembuatan peta para peraih Nobel di atas. Kelebihan lain dari metode ini adalah kita akan mendapatkan data peraih Nobel yang lahir di Indonesia. Pemenang itu ialah Willem Einthoven. Hal ini tentu akan lebih sulit kita dapatkan jika tanpa menggunakan data world_country, karena dalam data Nobel, Einthoven tertulis lahir di Java Dutch East Indies (now Indonesia). Hal ini dapat terjadi karena pada saat Einthoven lahir, Semarang masih berada dalam kekuasaan Pemerintah Kolonial Hindia Belanda.\n\n# Mendapatkan data peraih Nobel kelahiran Indonesia\nnobel_country %>%\n  filter(country == 'Indonesia')\n\n\n\n  \n\n\n\n\n\n\nWillem Einthoven, seorang ilmuan kesehatan kelahiran Semarang, 21 Mei 1860, yang berjasa dalam penemuan alat elektrokardiogram."
  },
  {
    "objectID": "posts/Nobel of Prizes/NobelPrizes.html#dominasi-amerika-serikat-as",
    "href": "posts/Nobel of Prizes/NobelPrizes.html#dominasi-amerika-serikat-as",
    "title": "Visualisasi Sejarah Para Peraih Penghargaan Nobel",
    "section": "Dominasi Amerika Serikat (AS)",
    "text": "Dominasi Amerika Serikat (AS)\nTentunya bukan hal yang mengejutkan jika Amerika Serikat menjadi negara dengan jumlah penerima Nobel terbanyak di dunia. Tetapi, di tahun 1901 sebagian besar pemenang Nobel adalah orang Eropa. Kapankah AS mulai mendominasi penghargaan Nobel?\n\n# Menghitung proporsi orang Amerika pemenang Nobel\nnobel$usa_born_winner <- nobel$Born.country == 'USA'\nfloor_decade <- function(value){ return(value - value %% 10) }\nnobel$decade <- floor_decade(nobel$Year)\nprop_usa_winners <- nobel %>%\n  group_by(decade) %>%\n  summarize(mean_usa = mean(usa_born_winner, na.rm = TRUE))\nprop_usa_winners"
  },
  {
    "objectID": "posts/Nobel of Prizes/NobelPrizes.html#memvisualisasikan-dominasi-as",
    "href": "posts/Nobel of Prizes/NobelPrizes.html#memvisualisasikan-dominasi-as",
    "title": "Visualisasi Sejarah Para Peraih Penghargaan Nobel",
    "section": "Memvisualisasikan Dominasi AS",
    "text": "Memvisualisasikan Dominasi AS\nSetelah melihat tabel di atas, tentunya agak sulit dimengerti jika hanya melihat data mentah. Maka, mari kita membuat visualisasinya.\n\n# Membuat visualisasi\nggplot(prop_usa_winners, aes(x=decade, y=mean_usa)) +\n  geom_line() +\n  labs(title=\"Dominasi Amerika Serikat dalam Penghargaan Nobel\")\n\n\n\n\n\n# Membuat pengelompokan berdasarkan kategori Nobel\nprop_category <- nobel %>%\n  group_by(decade, Category) %>%\n  summarize(mean = mean(usa_born_winner, na.rm = TRUE))\n\n`summarise()` has grouped output by 'decade'. You can override using the\n`.groups` argument.\n\nggplot(prop_category, aes(x=decade, y=mean, color=Category)) +\n  geom_line() +\n  labs(title=\"Dominasi AS per Kategori Nobel\")"
  },
  {
    "objectID": "posts/Nobel of Prizes/NobelPrizes.html#eksistensi-wanita-dalam-penghargaan-nobel",
    "href": "posts/Nobel of Prizes/NobelPrizes.html#eksistensi-wanita-dalam-penghargaan-nobel",
    "title": "Visualisasi Sejarah Para Peraih Penghargaan Nobel",
    "section": "Eksistensi Wanita dalam Penghargaan Nobel",
    "text": "Eksistensi Wanita dalam Penghargaan Nobel\nSebelumnya, kita sudah melihat bahwa ada perbedaan jumlah yang cukup besar dalam peraihan Nobel antara pria dan wanita. Lalu, kategori apa saja yang umum ditempuh oleh wanita dalam ilmu pengetahuan?\n\n# Menghitung proporsi pemenang wanita per dekade\nnobel$female_winner <- nobel$Gender == 'female'\nprop_female_winners <- nobel %>%\n  group_by(decade, Category) %>%\n  summarize(mean_fem = mean(female_winner, na.rm = TRUE))\n\n`summarise()` has grouped output by 'decade'. You can override using the\n`.groups` argument.\n\n# Membuat plot\nggplot(prop_female_winners, aes(x=decade, y=mean_fem, color=Category)) +\n  geom_line() +\n  labs(title=\"Wanita dalam Penghargaan Nobel per Kategori Ilmu\")"
  },
  {
    "objectID": "posts/Nobel of Prizes/NobelPrizes.html#wanita-pertama-pemenang-penghargaan-nobel",
    "href": "posts/Nobel of Prizes/NobelPrizes.html#wanita-pertama-pemenang-penghargaan-nobel",
    "title": "Visualisasi Sejarah Para Peraih Penghargaan Nobel",
    "section": "Wanita Pertama Pemenang Penghargaan Nobel",
    "text": "Wanita Pertama Pemenang Penghargaan Nobel\nPlot di atas walau terlihat agak berantakan, namun ia memperlihatkan tren dan pola yang cukup menarik. Wanita pemenang Nobel lebih banyak berkiprah di bidang sastra, kimia, dan perdamaian. Walau tren di bidang kesehatan cukup banyak di tahun 1990-an, namun menurun hingga tahun 2022.\nMelihat data di atas, mungkin muncul rasa penasaran: “Siapakah wanita pertama yang memenangkan penghargaan Nobel? Kategori apa?”\n\n# Mengambil data wanita pertama peraih Nobel\nfirst_female <- head(nobel %>%\n  filter(Gender == 'female') %>%\n  arrange(Year), 1)\n\n# Print wanita pertama\nfirst_female\n\n\n\n  \n\n\n\n\n\n\nMarie Curie, Wanita Pertama Peraih Nobel"
  },
  {
    "objectID": "posts/Nobel of Prizes/NobelPrizes.html#pemenang-beruntun",
    "href": "posts/Nobel of Prizes/NobelPrizes.html#pemenang-beruntun",
    "title": "Visualisasi Sejarah Para Peraih Penghargaan Nobel",
    "section": "Pemenang Beruntun",
    "text": "Pemenang Beruntun\nUntuk sebagian besar ilmuan/penulis/aktivis, memenangkan penghargaan Nobel tentu saja menjadi sebuah pencapaian luar biasa. Tetapi untuk beberapa orang, satu itu tidak cukup, beberapa dari mereka memenangkan penghargaan tersebut lebih dari satu kali. Siapa saja orang yang beruntung itu?\n\ndup_name <- nobel %>%\n  group_by(Firstname, Surname) %>%\n  filter(n()>1)\ndup_name"
  },
  {
    "objectID": "posts/Nobel of Prizes/NobelPrizes.html#berapa-umur-para-ilmuan-saat-meraih-nobel",
    "href": "posts/Nobel of Prizes/NobelPrizes.html#berapa-umur-para-ilmuan-saat-meraih-nobel",
    "title": "Visualisasi Sejarah Para Peraih Penghargaan Nobel",
    "section": "Berapa Umur Para Ilmuan saat Meraih Nobel?",
    "text": "Berapa Umur Para Ilmuan saat Meraih Nobel?\nDaftar nama berulang di atas memunculkan satu nama yang mungkin sudah tidak asing, Marie Curie. Ia adalah ilmuan Polandia yang mendapatkan medali Nobel dalam bidang fisika karena jasanya menemukan radiasi, serta dalam bidang kimia karena telah berhasil mengisolasi radium dan polonium. John Bardeen juga mendapatkan medali sebanyak dua kali dalam bidang fisika karena penemuannya pada transistor dan superkonduktivitas. Frederick Sanger mendapatkan dua kali di bidang kimia. Linus Carl Pauling pertama kali mendapat medali di bidang kimia lalu perdamaian karena perannya dalam mengampanyekan pelucutan nuklir.\nNah, mari kita lihat di umur berapa para peraih Nobel mendapatkan penghargaan? (Biar bisa ngira-ngira “kapan ya gue bisa kek mereka?”)\n\n# Menghitung umur peraih Nobel\nnobel['BornYear'] <- substr(nobel$Born,1,4)\nnobel['age'] <- nobel$Year - as.integer(nobel$BornYear)\n\n# Membuat plot umur pemenang Nobel\nggplot(nobel, aes(x=Year, y=age)) +\n  geom_point() +\n  geom_smooth(method = 'lm') +\n  labs(title = \"Umur Para Pemenang Penghargaan Nobel\")\n\n`geom_smooth()` using formula 'y ~ x'\n\n\nWarning: Removed 40 rows containing non-finite values (stat_smooth).\n\n\nWarning: Removed 40 rows containing missing values (geom_point)."
  },
  {
    "objectID": "posts/Nobel of Prizes/NobelPrizes.html#perbedaan-umur-antara-kategori-ilmu",
    "href": "posts/Nobel of Prizes/NobelPrizes.html#perbedaan-umur-antara-kategori-ilmu",
    "title": "Visualisasi Sejarah Para Peraih Penghargaan Nobel",
    "section": "Perbedaan Umur antara Kategori Ilmu",
    "text": "Perbedaan Umur antara Kategori Ilmu\nGrafik plot di atas memberikan sangat banyak informasi. Kita bisa melihat bahwa sebagian besar orang menerima penghargaan Nobel saat umur mereka sekitar 55 tahun, tetapi saat ini rata-rata ada di umur 63. Tetapi ada perbedaan yang besar antara para pemenang ini, walau sebagian besar umur mereka di atas 50, tetapi ada pula yang menerimanya saat berusia sangat muda.\nKita juga dapat melihat kepadatan titik pada grafik di atas cenderung naik dibandingkan tahun 1900-an. Selain itu, semakin mendekati hari ini semakin banyak medali yang dibagikan, maka semakin banyak pula para pemenang. Kita juga melihat bahwa ada kekosongan, yang tentunya diakibatkan oleh terjadinya Perang Dunia II (1939-1945) saat itu.\nSekarang, mari kita lihat umur penerima Nobel per kategori ilmu:\n\n# Sama seperti plot di atas, namun dibagi per kategori\nggplot(nobel, aes(x=Year, y=age)) +\n  geom_point() +\n  geom_smooth(method = 'lm') +\n  facet_wrap(~ Category, ncol=2) +\n  labs(title = \"Pemenang Nobel per Kategori\")\n\n`geom_smooth()` using formula 'y ~ x'\n\n\nWarning: Removed 40 rows containing non-finite values (stat_smooth).\n\n\nWarning: Removed 40 rows containing missing values (geom_point)."
  },
  {
    "objectID": "posts/Nobel of Prizes/NobelPrizes.html#pemenang-tertua-dan-termuda",
    "href": "posts/Nobel of Prizes/NobelPrizes.html#pemenang-tertua-dan-termuda",
    "title": "Visualisasi Sejarah Para Peraih Penghargaan Nobel",
    "section": "Pemenang Tertua dan Termuda",
    "text": "Pemenang Tertua dan Termuda\nSemakin banyak grafik yang menarik di sini! Mari kita lihat bahwa pemenang dari kelompok keilmuan kimia, kesehatan, dan fisika semakin ke sini semakin tua. Tren ini lebih terlihat di fisika, yang jika dulu rata-rata usia peraih Nobel di bawah 50, kini hampir di 70 tahun. Sastra dan ekonomi lebih stabil. Kita juga dapat melihat bahwa ekonomi merupakan kategori yang baru. Tetapi kategori perdamaian trennya justru lebih muda.\nDalam kategori perdamaian kita bisa melihat bahwa ada seseorang yang namanya sudah menempel di sumbu-x grafik tersebut. Hal ini menimbulkan pertanyaan: Siapakah orang tertua dan termuda peraih penghargaan Nobel?\n\n# Orang peraih penghargaan Nobel tertua\nhead(nobel %>%\n  arrange(desc(age)), 1)\n\n\n\n  \n\n\n\n\n# Orang peraih penghargaan Nobel termuda\nhead(nobel %>%\n       arrange(age), 2)"
  },
  {
    "objectID": "posts/Nobel of Prizes/NobelPrizes.html#sekarang-giliranmu",
    "href": "posts/Nobel of Prizes/NobelPrizes.html#sekarang-giliranmu",
    "title": "Visualisasi Sejarah Para Peraih Penghargaan Nobel",
    "section": "Sekarang Giliranmu!",
    "text": "Sekarang Giliranmu!\nYes! Akhirnya kita berada pada penghujung tulisan. Sekarang giliranmu untuk meraih Nobel di masa yang akan datang. Tak perlu cemas, kita bisa lihat bahwa John Goodenough berusia 97 tahun ketika mendapatkan medali Nobel di bidang kimia, karena kontribusinya dalam perkembangan baterai lithium-ion! Kita juga harus punya semangat seperti Malala Yousafzai yang mendapatkan medali Nobel Perdamaian saat berumur 17 tahun karena perjuangannya terhadap kebebasan dan pendidikan kepada anak-anak.\n\n\n\n“Aku adalah salah satu dari 66 juta wanita yang tercabut pendidikannya” -Malala Yousafzai\n\n\nSekian dan terima kasih.\nSalam Maria, penuh rahmat, Tuhan sertamu."
  },
  {
    "objectID": "posts/Spotify-Wrapped-2022-with-R/SpotifyWrapped2022.html",
    "href": "posts/Spotify-Wrapped-2022-with-R/SpotifyWrapped2022.html",
    "title": "Saya membuat Spotify Wrapped dengan R - Part 1",
    "section": "",
    "text": "Jadi sekitar akhir November 2022 tuh saya dapet notifikasi dari aplikasi Spotify bahwa mereka telah mempublikasikan rangkuman dari kegiatan saya di aplikasi tersebut sepanjang tahun 2022. Semua rangkuman itu dikumpulkan dalam satu proyek audiovisual: Spotify Wrapped 2022\n\n\n\n\n\nSebenernya sih semua laporannya cukup akurat ya. Tapi rasanya ada yang aneh: Genre Indonesian Pop ada di urutan kedua teratas. Padahal saya agak jarang dengerin lagu Indonesia. Ya paling kalo lagi ngumpul bareng temen aja, atau kalo lagi pengen relate sama musik lokal terkini.\nLalu dalam sejenak secercah budi dari Dewi Saraswati tiba pada akal saya. “Bagaimana kalo saya membuat analisis Spotify Wrapped saya sendiri?”.\nDalam data akun saya yang di-request dari Spotify API, ada tujuh variabel dalam riwayat penggunaan Spotify selama setahun kemarin (yang dikumpulkan dalam berkas StreamingHistory.json).\n\nArtist Name : Nama artis/penyanyi.\nEnd Time : Tanggal dan waktu lagu tersebut selesai diputar (dalam format UTC).\nMs Played : Lamanya waktu lagu tersebut diputar (dalam mili detik).\nTrack Name : Nama lagu\n\nAgar laporan ini semakin punya nilai kegunaan, saya akan menambahkan beberapa berkas pendukung.\nTujuan:\n\nMenganalisa riwayat pemakaian Spotify saya selama tahun 2022\nMengenali genre dan jenis musik apa saja yang saya sukai\nDan lain-lain"
  },
  {
    "objectID": "posts/Spotify-Wrapped-2022-with-R/SpotifyWrapped2022.html#pembahasan",
    "href": "posts/Spotify-Wrapped-2022-with-R/SpotifyWrapped2022.html#pembahasan",
    "title": "Saya membuat Spotify Wrapped dengan R - Part 1",
    "section": "Pembahasan",
    "text": "Pembahasan\n\nPengaturan Awal\n\n# Memuat library\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyverse)\n\n── Attaching packages\n───────────────────────────────────────\ntidyverse 1.3.2 ──\n\n\n✔ ggplot2 3.3.6     ✔ purrr   0.3.5\n✔ tibble  3.1.8     ✔ stringr 1.4.1\n✔ tidyr   1.2.1     ✔ forcats 0.5.2\n✔ readr   2.1.3     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(ggplot2)\nlibrary(jsonlite)\n\n\nAttaching package: 'jsonlite'\n\nThe following object is masked from 'package:purrr':\n\n    flatten\n\nlibrary(dygraphs)\n\n\n\nMengambil Data\n\n# Mengambil dataset\nspotify1 <- fromJSON(\"datasets/endsong_0.json\")\nspotify2 <- fromJSON(\"datasets/endsong_1.json\")\nspotify3 <- fromJSON(\"datasets/endsong_2.json\")\nspotify4 <- fromJSON(\"datasets/endsong_3.json\")\n\n\n# Menggabungkan dataset\nspotify <- rbind(spotify1, spotify2, spotify3, spotify4)\nglimpse(spotify)\n\nRows: 55,514\nColumns: 21\n$ ts                                <chr> \"2021-12-13T15:04:56Z\", \"2022-10-16T…\n$ username                          <chr> \"alifpd\", \"alifpd\", \"alifpd\", \"alifp…\n$ platform                          <chr> \"Android OS 11 API 30 (vivo, V2025)\"…\n$ ms_played                         <int> 69158, 164701, 226575, 1926, 257280,…\n$ conn_country                      <chr> \"ID\", \"ID\", \"ID\", \"ID\", \"ID\", \"ID\", …\n$ ip_addr_decrypted                 <chr> \"182.0.240.179\", \"114.5.218.10\", \"12…\n$ user_agent_decrypted              <chr> \"unknown\", \"unknown\", \"unknown\", \"un…\n$ master_metadata_track_name        <chr> \"Kyon\", \"Yalan\", \"Ohebbou Yadayka\", …\n$ master_metadata_album_artist_name <chr> \"Pritam\", \"Reynmen\", \"Faia Younan\", …\n$ master_metadata_album_album_name  <chr> \"Barfi! (Original Motion Picture Sou…\n$ spotify_track_uri                 <chr> \"spotify:track:1sYC1fG7s4p0pTykrJqmg…\n$ episode_name                      <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ episode_show_name                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ spotify_episode_uri               <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ reason_start                      <chr> \"fwdbtn\", \"trackdone\", \"trackdone\", …\n$ reason_end                        <chr> \"endplay\", \"trackdone\", \"trackdone\",…\n$ shuffle                           <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, F…\n$ skipped                           <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ offline                           <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, F…\n$ offline_timestamp                 <dbl> 1.639408e+12, 1.665916e+12, 1.517627…\n$ incognito_mode                    <lgl> FALSE, FALSE, FALSE, FALSE, FALSE, F…"
  },
  {
    "objectID": "posts/Spotify-Wrapped-2022-with-R/SpotifyWrapped2022.html#pembersihan-data-dan-membenarkan-data",
    "href": "posts/Spotify-Wrapped-2022-with-R/SpotifyWrapped2022.html#pembersihan-data-dan-membenarkan-data",
    "title": "Saya membuat Spotify Wrapped dengan R - Part 1",
    "section": "Pembersihan data dan Membenarkan Data",
    "text": "Pembersihan data dan Membenarkan Data\n\n# Membersihkan data\nspotify$ts <- gsub(\"T\", \" \", spotify$ts)\nspotify$ts <- gsub(\"Z\", \"\", spotify$ts)\n\n# Mengubah zona waktu timestamp\nspotify$ts <- as.POSIXct(spotify$ts, tz=\"Europe/London\")\nspotify$ts <- lubridate::with_tz(spotify$ts, \"Asia/Jakarta\")\n\n\nMengatur Data\n\n# Mengonversi mikrosekon menjadi menit\nspotify$minutes_played <- spotify$ms_played / 60000"
  },
  {
    "objectID": "posts/Spotify-Wrapped-2022-with-R/SpotifyWrapped2022.html#analisis-data-2022",
    "href": "posts/Spotify-Wrapped-2022-with-R/SpotifyWrapped2022.html#analisis-data-2022",
    "title": "Saya membuat Spotify Wrapped dengan R - Part 1",
    "section": "Analisis Data 2022",
    "text": "Analisis Data 2022\n\nMengambil data Spotify tahun 2022\n\n# Mengambil data Spotify hanya tahun 2022\nspotify2022 <- subset(spotify, ts > \"2022-01-01 00:00:00\" & ts  < \"2022-12-31 23:59:59\")\n\n\n\nLagu, artis, dan album\n\n# Menghitung lagu, artis, dan lagu unik\nprint(paste(\"Lagu yang saya telusuri selama tahun 2022 adalah sebanyak:\", n_distinct(spotify2022$master_metadata_track_name)))\n\n[1] \"Lagu yang saya telusuri selama tahun 2022 adalah sebanyak: 1936\"\n\nprint(paste(\"Artis yang saya telusuri selama tahun 2022 adalah sebanyak:\", n_distinct(spotify2022$master_metadata_album_artist_name)))\n\n[1] \"Artis yang saya telusuri selama tahun 2022 adalah sebanyak: 730\"\n\nprint(paste(\"Lagu yang saya telusuri selama tahun 2022 adalah sebanyak:\", n_distinct(spotify2022$master_metadata_album_album_name)))\n\n[1] \"Lagu yang saya telusuri selama tahun 2022 adalah sebanyak: 1449\"\n\n# Menghitung menit total selama 2022\nprint(paste(\"Saya mendengarkan musik di tahun 2022 selama:\", round(sum(spotify2022$minutes_played),0)))\n\n[1] \"Saya mendengarkan musik di tahun 2022 selama: 32961\"\n\n\n\nLagu apakah yang paling sering saya dengar?\n\n# Mengetahui lagu paling sering didengar\ntoptrack2022 <- spotify2022 %>%\n  count(master_metadata_track_name, sort = TRUE)\ntoptrack2022\n\n\n\n  \n\n\n\n\n# Membuat plot toptrack2022\ntoptrack2022 %>%\n  head(10) %>%\n  ggplot(aes(x=reorder(master_metadata_track_name, n), y=n))+\n    geom_col(aes(fill=master_metadata_track_name), show.legend = FALSE)+\n    geom_text(aes(label=n), position=position_dodge(width=0), size=3)+\n    coord_flip()+\n    labs(title = \"Lagu Teratas 2022\",\n         x=NULL,\n         y=\"Jumlah Putar\")\n\n\n\n\n\n\n\nSiapa artis yang paling sering saya nikmati karyanya?\n\n# Mendapatkan angka teratas artis 2022\ntopartist2022 <- spotify2022 %>%\n  count(master_metadata_album_artist_name, sort = TRUE)\ntopartist2022\n\n\n\n  \n\n\n\n\n# Membuat plot artis teratas 2022\ntopartist2022 %>%\n  head(10) %>%\n  ggplot(aes(x=reorder(master_metadata_album_artist_name, n), y=n))+\n           geom_col(aes(fill=master_metadata_album_artist_name), show.legend = FALSE)+\n  geom_text(aes(label=n), position=position_dodge2(width=0), size=3) +\n           coord_flip()+\n           labs(title = \"Artis Teratas 2022\",\n                x=NULL,\n                y=\"Jumlah putar\")\n\n\n\n\n\n\n\nWaktu\n\nPada jam berapakah saya mendengarkan Spotify?\n\n# Membuat data listen per hour\nspotify2022$hour <- as.numeric(format(spotify2022$ts, '%H'))\nlistenperhour <- aggregate(spotify2022$master_metadata_track_name, by=list(spotify2022$hour), FUN=length)\n\n# Membuat plot listen per hour\nggplot(listenperhour, aes(x=Group.1, y=x)) +\n  geom_col(fill=\"#1db954\") +\n  labs(x=\"Jam\",\n       y=NULL,\n       title=\"Seberapa sering saya mendengarkan Spotify per Jam\") +\n  scale_x_continuous(breaks = seq(0,23,1))\n\n\n\n\n\n\nBerapa menit penggunaan Spotify saya per hari selama 2022?\n\n# Menghitung total menit per hari\ndaily_minutes_2022 <- spotify2022 %>%\n  group_by(Date = as.Date(ts)) %>%\n  summarize(sum_minute = sum(minutes_played))\ndaily_minutes_2022_df <- data.frame(daily_minutes_2022)\nrownames(daily_minutes_2022_df) <- daily_minutes_2022_df$Date\ndaily_minutes_2022_df <- daily_minutes_2022_df %>%\n  select(sum_minute)\n\n# Membuat plot interaktif\ndygraph(daily_minutes_2022_df, main = \"Total Menit Penggunaan Spotify per Hari\")\n\n\n\n\n\n\nspotify$year <- as.numeric(format(spotify$ts, '%Y'))\nlistenperyear <- spotify %>%\n  group_by(year) %>%\n  summarise(sum_minutes = round(sum(minutes_played),0))\n\nggplot(listenperyear, aes(x=year, y=sum_minutes)) +\n  geom_col(fill=\"#1db954\") +\n  geom_text(aes(label=sum_minutes), position=position_stack(vjust=0.5), size=3) +\n  scale_x_continuous(breaks = seq(2016,2022,1))"
  },
  {
    "objectID": "posts/The Android App Market/index.html",
    "href": "posts/The Android App Market/index.html",
    "title": "Pangsa Pasar Aplikasi Android di Google Play",
    "section": "",
    "text": "Aplikasi mobile sekarang ada di mana-mana. Semua orang bisa membuatnya dengan mudah dan bahkan banyak yang mencari untung dengan membuat aplikasi. Dua faktor tersebut menyebabkan semakin banyak aplikasi yang dibuat dan dikembangkan. Pada kesempatan kali ini, kita akan membuat analisis komprehensif tentang pasar aplikasi Android dengan membandingkannya dengan sekitar sepuluh ribu aplikasi di Google Play dari bermacam-macam kategori. Kita akan melihat insight dari data yang telah kita punya untuk memberikan gambaran terkait strategi pengembangan.\n\nMari kita lihat dua data yang telah kita kumpulkan:\n\nApps.csv : berisi semua detail aplikasi di Google Play. Di dalamnya juga terdapat 13 fitur yang menjelaskan aplikasi tersebut.\nuser_reviews.csv : berisi 100 review dari tiap aplikasi. Teks dalam review tersebut telah diproses dan diatribusikan dengan tiga fitur baru: Sentimen (Positif, Negatif, atau Netral), Sentimen Polaritas, dan Sentimen Subjektivitas.\n\n\n#Membaca dataset\nimport pandas as pd\napps_with_duplicates = pd.read_csv('datasets/apps.csv')\n\n# Menghilangkan duplikasi dari apps_with_duplicates\napps = apps_with_duplicates.drop_duplicates(subset='App')\n\n# Print angka total aplikasi\nprint('Jumlah total aplikasi di dalam dataset = ', apps['App'].value_counts().sum())\napps.head()\n\nJumlah total aplikasi di dalam dataset =  9659\n\n\n\n\n\n\n  \n    \n      \n      Unnamed: 0\n      App\n      Category\n      Rating\n      Reviews\n      Size\n      Installs\n      Type\n      Price\n      Content Rating\n      Genres\n      Last Updated\n      Current Ver\n      Android Ver\n    \n  \n  \n    \n      0\n      0\n      Photo Editor & Candy Camera & Grid & ScrapBook\n      ART_AND_DESIGN\n      4.1\n      159\n      19.0\n      10,000+\n      Free\n      0\n      Everyone\n      Art & Design\n      January 7, 2018\n      1.0.0\n      4.0.3 and up\n    \n    \n      1\n      1\n      Coloring book moana\n      ART_AND_DESIGN\n      3.9\n      967\n      14.0\n      500,000+\n      Free\n      0\n      Everyone\n      Art & Design;Pretend Play\n      January 15, 2018\n      2.0.0\n      4.0.3 and up\n    \n    \n      2\n      2\n      U Launcher Lite – FREE Live Cool Themes, Hide ...\n      ART_AND_DESIGN\n      4.7\n      87510\n      8.7\n      5,000,000+\n      Free\n      0\n      Everyone\n      Art & Design\n      August 1, 2018\n      1.2.4\n      4.0.3 and up\n    \n    \n      3\n      3\n      Sketch - Draw & Paint\n      ART_AND_DESIGN\n      4.5\n      215644\n      25.0\n      50,000,000+\n      Free\n      0\n      Teen\n      Art & Design\n      June 8, 2018\n      Varies with device\n      4.2 and up\n    \n    \n      4\n      4\n      Pixel Draw - Number Art Coloring Book\n      ART_AND_DESIGN\n      4.3\n      967\n      2.8\n      100,000+\n      Free\n      0\n      Everyone\n      Art & Design;Creativity\n      June 20, 2018\n      1.1\n      4.4 and up"
  },
  {
    "objectID": "posts/The Android App Market/index.html#pembersihan-data-data-cleaning",
    "href": "posts/The Android App Market/index.html#pembersihan-data-data-cleaning",
    "title": "Pangsa Pasar Aplikasi Android di Google Play",
    "section": "Pembersihan Data (Data Cleaning)",
    "text": "Pembersihan Data (Data Cleaning)\nPembersihan data merupakan salah satu hal penting yang harus dilakukan dalam proyek ilmu data. Walaupun proses ini terbilang membosankan, tapi tak bisa disepelekan.\nDengan melihat sampel acak dalam baris dataset di atas, kita mengetahui bahwa isi dalam beberapa kolom seperti Installs dan Price punya karakter unik (+, $) tergantung dengan jenis angka apa dalam kolom tersebut. Hal ini dimaksudkan agar mencegah kolom diinterpretasikan sebagai angka murni, yang akan membuat kita kesulitan untuk mengaplikasikan perhitungan matematis. Maka dari itu, kita ingin membuat kolom-kolom ini hanya berisikan angka digit [0-9].\nSelanjutnya, kita sekarang akan melakukan pembersihan data, terutama menghilangkan karakter-karakter unik , dan + yang ada di kolom Installs dan $ yang ada di kolom Price.\n\n# Daftar karakter yang ingin dihapus\nchars_to_remove = ['+', ',', '$']\n# Daftar kolom yang ingin dibersihkan\ncols_to_clean = ['Installs', 'Price']\n\n# Membuat loop untuk tiap kolom dalam cols_to_clean\nfor col in cols_to_clean:\n  # Membuat loop untuk tiap karakter dalam chars_to_remove\n  for char in chars_to_remove:\n    # Mengganti karakter dengan string kosong\n    apps[col] = apps[col].apply(lambda x: x.replace(char, ''))\n    \n# Print info dataframe apps\nprint(apps.info())\n\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 9659 entries, 0 to 9658\nData columns (total 14 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   Unnamed: 0      9659 non-null   int64  \n 1   App             9659 non-null   object \n 2   Category        9659 non-null   object \n 3   Rating          8196 non-null   float64\n 4   Reviews         9659 non-null   int64  \n 5   Size            8432 non-null   float64\n 6   Installs        9659 non-null   object \n 7   Type            9659 non-null   object \n 8   Price           9659 non-null   object \n 9   Content Rating  9659 non-null   object \n 10  Genres          9659 non-null   object \n 11  Last Updated    9659 non-null   object \n 12  Current Ver     9651 non-null   object \n 13  Android Ver     9657 non-null   object \ndtypes: float64(2), int64(2), object(10)\nmemory usage: 1.1+ MB\nNone"
  },
  {
    "objectID": "posts/The Android App Market/index.html#membenarkan-tipe-data",
    "href": "posts/The Android App Market/index.html#membenarkan-tipe-data",
    "title": "Pangsa Pasar Aplikasi Android di Google Play",
    "section": "Membenarkan Tipe Data",
    "text": "Membenarkan Tipe Data\nJika kita lihat dalam info di atas maka kita mengetahui bahwa kolom Installs dan Price dikategorikan sebagai tipe data object (bukan int atau float). Hal ini disebabkan karena sebelumnya kedua kolom memiliki input yang berbeda-beda: digit dan karakter unik.\nEmpat fitur yang akan sering kita gunakan adalah Installs, Size, Rating, dan Price. Ketika Size dan Rating keduanya adalah float (angka murni), kita masih harus mengubah Installs dan Price menjadi angka numerik.\n\nimport numpy as np\n\n# Mengonversi tipe data Installs menjadi float\napps['Installs'] = apps['Installs'].astype('float64')\n\n# Mengonversi tipe data Price menjadi float\napps['Price'] = apps['Price'].astype('float64')\n\n# Mengecek tipe data dari dataframe apps\nprint(apps.dtypes)\n\nUnnamed: 0          int64\nApp                object\nCategory           object\nRating            float64\nReviews             int64\nSize              float64\nInstalls          float64\nType               object\nPrice             float64\nContent Rating     object\nGenres             object\nLast Updated       object\nCurrent Ver        object\nAndroid Ver        object\ndtype: object"
  },
  {
    "objectID": "posts/The Android App Market/index.html#mengkategorisasikan-aplikasi",
    "href": "posts/The Android App Market/index.html#mengkategorisasikan-aplikasi",
    "title": "Pangsa Pasar Aplikasi Android di Google Play",
    "section": "Mengkategorisasikan Aplikasi",
    "text": "Mengkategorisasikan Aplikasi\nDengan lebih dari 1 milyar pengguna aktif di 190 negara di dunia, Google Play tetap menjadi tempat utama distribusi aplikasi yang menjangkau global. Agar perusahaan/bisnis dapat menjangkau aplikasinya ke pengguna, penting untuk membuat aplikasi tersebut cepat dan mudah ditemukan di Google Play. Untuk mengembangkan pengalaman pencarian, Google telah memperkenalkan konsep mengelompokkan aplikasi berdasarkan kategori.\nHal ini akan membawa kita ke beberapa pertanyaan:\n\nKategori apa yang memiliki pengguna tertinggi di pasar?\nApakah ada kategori spesifik yang mendominasi pasar?\nKategori apa yang memiliki jumlah aplikasi paling sedikit?\n\nKita akan melihat bahwa terdapat 33 kategori aplikasi di dalam dataset. Aplikasi Family dan Game memiliki prevalensi pasar tertinggi. Menariknya, aplikasi Tools, Business, dan Medical juga berada di peringkat atas.\n\n#Mengimpor plotly\nimport plotly\nplotly.offline.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# Print jumlah total kategori\nnum_categories = len(apps['Category'].unique())\nprint('Jumlah kategori = ', num_categories)\n\n# Menghitung angka aplikasi dalam setiap 'Category'\nnum_apps_in_category = apps['Category'].value_counts()\n\n# Mengurutkan num_apps_in_category dalam urutan menurun (descending) berdasarkan jumlah aplikasi dalam tiap kategori\nsorted_num_apps_in_category = num_apps_in_category.sort_values(ascending=False)\n\n# Membuat plot\ndata = [go.Bar(\n        x = num_apps_in_category.index, # index = category name\n        y = num_apps_in_category.values, # value = count\n)]\n\n# Menampilkan data\nplotly.offline.iplot(data)\n\nJumlah kategori =  33"
  },
  {
    "objectID": "posts/The Android App Market/index.html#distribusi-rating-aplikasi",
    "href": "posts/The Android App Market/index.html#distribusi-rating-aplikasi",
    "title": "Pangsa Pasar Aplikasi Android di Google Play",
    "section": "Distribusi Rating Aplikasi",
    "text": "Distribusi Rating Aplikasi\nSetelah melihat market share dari tiap kategori aplikasi, mari kita meliha bagaimana aplikasi-aplikasi ini bekerja secara rata-rata. Penilaian (rating) aplikasi (dalam skala 1 sampai 5) mempengaruhi pencarian, pengubahan aplikasi, dan juga nama baik dari sebuah brand. Penilaian adalah indikator kunci performa suatu aplikasi.\nDari penelitian ini, kita menemukan bahwa rata-rata volume penilaian keseluruhan aplikasi adalah 4,17. Jika dibuatkan histogram, maka ia akan left skewed yang mengindikasikan bahwa sebagia besar aplikasi diberikan rating tinggi.\n\n# Average rating of apps\navg_app_rating = apps['Rating'].mean()\nprint('Rata-rata rating aplikasi = ', avg_app_rating)\n\nRata-rata rating aplikasi =  4.173243045387994\n\n\n\n# Distribution of apps according to their ratings\ndata = [go.Histogram(\n        x = apps['Rating']\n)]\n\n# Vertical dashed line to indicate the average app rating\nlayout = {'shapes': [{\n              'type' :'line',\n              'x0': avg_app_rating,\n              'y0': 0,\n              'x1': avg_app_rating,\n              'y1': 1000,\n              'line': { 'dash': 'dashdot'}\n          }]\n          }\n\nplotly.offline.iplot({'data': data, 'layout': layout})"
  },
  {
    "objectID": "posts/The Android App Market/index.html#ukuran-dan-harga-suatu-aplikasi",
    "href": "posts/The Android App Market/index.html#ukuran-dan-harga-suatu-aplikasi",
    "title": "Pangsa Pasar Aplikasi Android di Google Play",
    "section": "Ukuran dan Harga suatu Aplikasi",
    "text": "Ukuran dan Harga suatu Aplikasi\nMari kita sekarang mencari tahu ukuran dan harga suatu aplikasi. Untuk ukuran, jika suatu aplikasi ponsel berukuran terlalu besar, maka pengguna akan kesulitan dan/atau merogoh kocek yang lkebih mahal untuk mengunduhnya. Waktu unduh yang panjang dapat membuat pengguna meninggalkan unduhannya sebelum mencoba aplikasi yang telah dibuat. Selain itu, setiap ponsel yang dimiliki pengguna punya penyimpanan yang terbatas. Untuk harga, beberapa pengguna memiliki ekspektasi bahwa aplikasi bersifat gratis atau dengan harga terjangkau. Masalah-masalah ini harus diperhatikan jika kita ingin menargetkan lebih banyak pengguna dari berbagai wilayah, yang tentunya memiliki kecepatan internet, mata uang dan nilai tukar yang berbeda.\nMaka kita akan mengajukan beberapa pertanyaan terkait dengan ukuran dan harga suatu aplikasi.\n\nApakah ukuran aplikasi mempengaruhi ratingnya?\nApakah pengguna menoleransi ukuran aplikasi kompleks yang besar atau mereka lebih memilih aplikasi sederhana yang ringan saja?\nApakah harga aplikasi mempengaruhi rating?\nApakah pengguna selalu lebih memilih aplikasi gratis ketimbang aplikasi berbayar?\n\nNah, kami menemukan bahwa mayoritas aplikasi yang memiliki rating teratas di Google Play (rating di atas 4) memiliki ukuran antara 2MB hingga 20MB. Kami juga menemukan bahwa sebagian besar aplikasi memiliki harga kurang dari $10.\n\n# Impor modul\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Memilih baris di mana 'Rating' dan 'Size' tidak kosong (null)\napps_with_size_and_rating_present = apps[(~apps['Rating'].isnull()) & (~apps['Size'].isnull())]\n\n# Memfilter kategori yang setidaknya memiliki 250 aplikasi\nlarge_categories = apps_with_size_and_rating_present.groupby('Category').filter(lambda x: len(x) >= 250)\n\n# Membuat plot size vs. rating\nplt1 = sns.jointplot(x = large_categories['Size'], y = large_categories['Rating'], kind = 'hex')\n\n# Memperlihatkan plot\nplt.show()\n\n\n\n\n\n# Memilih aplikasi yang 'Type'-nya 'Paid'\npaid_apps = apps_with_size_and_rating_present[apps_with_size_and_rating_present['Type'] == 'Paid']\n\n# Membuat plot price vs. rating\nplt2 = sns.jointplot(x = paid_apps['Price'], y = paid_apps['Rating'])\n\n# Memperlihatkan plot\nplt.show()"
  },
  {
    "objectID": "posts/The Android App Market/index.html#hubungan-antara-kategori-dan-harga-dalam-aplikasi",
    "href": "posts/The Android App Market/index.html#hubungan-antara-kategori-dan-harga-dalam-aplikasi",
    "title": "Pangsa Pasar Aplikasi Android di Google Play",
    "section": "Hubungan antara Kategori dan Harga dalam Aplikasi",
    "text": "Hubungan antara Kategori dan Harga dalam Aplikasi\nNah, sekarang kita masuk ke bagian tersulit. Bagaimana cara perusahaan dan pengembang menentukan keputusan akhir? Strategi monetisasi apa yang dapat diterapkan perusahaan untuk memaksimalkan keuntungan mereka? Tarif dari sebuah aplikasi sangat berhubungan erat dengan fitur, kompleksitas, dan platform yang disediakan.\nAda banyak faktor yang harus disadari ketika menentukan strategi penetapan tarif bagi suatu aplikasi. Penting untuk kita mengetahui seberapa ingin para pengguna untuk merogoh kocek mereka untuk membayar aplikasi. Penerapan strategi harga yang salah dapat menyebabkan ketidakinginan pengguna memakai bahkan untuk mengunduh aplikasi., Pengguna yang potensial bisa saja mengurungkan niat mereka untuk memakai aplikasi ketika mereka melihat tarif yang terlalu tinggi, atau mereka juga bisa saja menghapus aplikasi yang telah mereka pakai ketika mengetahui ada terlalu banyak iklan.\nKategori yang berbeda tentunya harga yang berbeda pula. Beberapa aplikasi sederhana dan digunakan sehari-hari, seperti kalkulator, seharusnya dibiarkan gratis. Tetapi, akan lebih pantas untuk memberikan tarif kepada, misalnya, aplikasi kesehatan yang bisa mendiagnosa pasien diabetes. Penelitian di bawah ini memperlihatkan bahwa aplikasi Medic dan Family adalah yang termahal. Bahkan, beberapa aplikasi memiliki harga di atas $80. Semua aplikasi Game memiliki tarif di bawah $20.\n\nfig, ax = plt.subplots()\nfig.set_size_inches(15, 8)\n\n# Memilih kategori aplikasi populer\npopular_app_cats = apps[apps.Category.isin(['GAME', 'FAMILY', 'PHOTOGRAPHY',\n                                            'MEDICAL', 'TOOLS', 'FINANCE',\n                                            'LIFESTYLE','BUSINESS'])]\n\n# Mengetahui tren harga dengan membuat plot Price vs. Kategori\nax = sns.stripplot(x = popular_app_cats['Price'], y = popular_app_cats['Category'], jitter=True, linewidth=1)\nax.set_title('Tren penerapan harga aplikasi per kategori')\n\n# Memperlihatkan plot\nplt.show()\n\n\n\n\n\n# Aplikasi yang memiliki tarif di atas 200\napps_above_200 = apps[apps['Price'] > 200]\napps_above_200[['Category', 'App', 'Price']]\n\n\n\n\n\n  \n    \n      \n      Category\n      App\n      Price\n    \n  \n  \n    \n      3327\n      FAMILY\n      most expensive app (H)\n      399.99\n    \n    \n      3465\n      LIFESTYLE\n      💎 I'm rich\n      399.99\n    \n    \n      3469\n      LIFESTYLE\n      I'm Rich - Trump Edition\n      400.00\n    \n    \n      4396\n      LIFESTYLE\n      I am rich\n      399.99\n    \n    \n      4398\n      FAMILY\n      I am Rich Plus\n      399.99\n    \n    \n      4399\n      LIFESTYLE\n      I am rich VIP\n      299.99\n    \n    \n      4400\n      FINANCE\n      I Am Rich Premium\n      399.99\n    \n    \n      4401\n      LIFESTYLE\n      I am extremely Rich\n      379.99\n    \n    \n      4402\n      FINANCE\n      I am Rich!\n      399.99\n    \n    \n      4403\n      FINANCE\n      I am rich(premium)\n      399.99\n    \n    \n      4406\n      FAMILY\n      I Am Rich Pro\n      399.99\n    \n    \n      4408\n      FINANCE\n      I am rich (Most expensive app)\n      399.99\n    \n    \n      4410\n      FAMILY\n      I Am Rich\n      389.99\n    \n    \n      4413\n      FINANCE\n      I am Rich\n      399.99\n    \n    \n      4417\n      FINANCE\n      I AM RICH PRO PLUS\n      399.99\n    \n    \n      8763\n      FINANCE\n      Eu Sou Rico\n      394.99\n    \n    \n      8780\n      LIFESTYLE\n      I'm Rich/Eu sou Rico/أنا غني/我很有錢\n      399.99"
  },
  {
    "objectID": "posts/The Android App Market/index.html#memfilter-aplikasi-sampah",
    "href": "posts/The Android App Market/index.html#memfilter-aplikasi-sampah",
    "title": "Pangsa Pasar Aplikasi Android di Google Play",
    "section": "Memfilter Aplikasi Sampah",
    "text": "Memfilter Aplikasi Sampah\nJika kita melihat dari data di atas sebenarnya ada beberapa aplikasi yang terlampau mahal padahal sebenarnya hanya aplikasi ‘sampah’ (anjir): aplikasi yang sebenarnya tidak punya tujuan untuk apa aplikasi tersebut dibuat. Beberapa pengembang aplikasi membuat aplikasi sampah seperti I Am Rich Premium atau most expensive app (H) hanya untuk lelucon atau untuk menguji skill pengembangan aplikasi mereka.\nMari kita memfilter aplikasi-aplikasi sampah ini dan membuat kembali visualisasinya.\n\n# Memilih aplikasi yang harganya di bawah 100\napps_under_100 = popular_app_cats[popular_app_cats['Price'] < 100]\n\nfig, ax = plt.subplots()\nfig.set_size_inches(15, 8)\n\n# Mencari tahu price vs. category dalam aplikasi otentik\nax = sns.stripplot(x = 'Price', y = 'Category', data = apps_under_100, jitter=True, linewidth=1)\nax.set_title('Tren penerapan harga aplikasi setelah memfilter aplikasi sampah')\n\n# Memperlihatkan plot\nplt.show()"
  },
  {
    "objectID": "posts/The Android App Market/index.html#popularitas-aplikasi-berbayar-vs.-aplikasi-gratis",
    "href": "posts/The Android App Market/index.html#popularitas-aplikasi-berbayar-vs.-aplikasi-gratis",
    "title": "Pangsa Pasar Aplikasi Android di Google Play",
    "section": "Popularitas Aplikasi Berbayar vs. Aplikasi Gratis",
    "text": "Popularitas Aplikasi Berbayar vs. Aplikasi Gratis\nTerdapat 5 tipe strategi penetapan harga untuk aplikasi di Google Play Store saat ini: free, freemium, paid, paymium, dan subscription. Mari kita fokus pada aplikasi gratis dan berbayar. Karakteristik aplikasi gratis adalah:\n\nDapat diunduh secara gratis.\nPemasukan utama lebih sering berasal dari iklan.\nSebagian besar dibuat oleh perusahaan yang memiliki produk lain dan aplikasi tersebut adalah tambahan dari produk lain tersebut.\nDapat berperan sebagai cara untuk mengenali pengguna, berkomunikasi, atau aplikasi pelayanan pengguna.\n\nBeberapa karakteristik aplikasi berbayar adalah:\n\nPengguna diharuskan untuk membayar sekali untuk mengunduh aplikasi tersebut dan menggunakannya.\nPengguna tak dapat merasakan pengalaman seutuhnya dari aplikasi tersebut sebelum membelinya.\n\nApakah aplikasi berbayar terpasang sama banyaknya seperti aplikasi gratis? Dalam penelitian di bawah ditemukan bahwa aplikasi berbayar memiliki jumlah pemasangan yang lebih rendah dibandingkan aplikasi gratis.\n\ntrace0 = go.Box(\n    # Data for paid apps\n    y = apps[apps['Type'] == 'Paid']['Installs'],\n    name = 'Paid'\n)\n\ntrace1 = go.Box(\n    # Data for free apps\n    y = apps[apps['Type'] == 'Free']['Installs'],\n    name = 'Free'\n)\n\nlayout = go.Layout(\n    title = \"Number of downloads of paid apps vs. free apps\",\n    yaxis = dict(title = \"Log number of downloads\",\n                type = 'log',\n                autorange = True)\n)\n\n# Add trace0 and trace1 to a list for plotting\ndata = [trace0, trace1]\nplotly.offline.iplot({'data': data, 'layout': layout})"
  },
  {
    "objectID": "posts/The Android App Market/index.html#analisis-sentimen-dalam-review-dari-pengguna",
    "href": "posts/The Android App Market/index.html#analisis-sentimen-dalam-review-dari-pengguna",
    "title": "Pangsa Pasar Aplikasi Android di Google Play",
    "section": "Analisis Sentimen dalam Review dari Pengguna",
    "text": "Analisis Sentimen dalam Review dari Pengguna\nMenggali informasi tentang review pengguna untuk mengetahui bagaimana orang menilai sebuah produk, brand, atau jasa dapat dilakukan dengan menerapkan teknik bernama Analisis Sentimen (Sentiment Analysis). Review dari pengguna aplikasi dapat dianalisis untuk mengidentifikasi mood pengguna: positif, negatif, atau netral selama menggunakan aplikasi. Misalnya, kata-kata positif dalam sebuah review biasanya mengandung kata ‘amazing (menakjubkan)’, ‘friendly (ramah)’, ‘good (bagus)’, ‘great (mantap)’, dan love (cinta)‘. Kata-kata negatif biasanya mengandung kata seperti’malware (virus)‘,’hate (benci)‘,’problem (masalah), ‘refund (pengembalian dana)’, dan ’incompetent (tak berkompeten).\nDengan membuat plot skor polaritas sentimen dari review pengguna aplikasi berbayar dan gratis, kita menemukan bahwa aplikasi gratis menerima banyak komentar-komentar pedas, yang diindikasikan oleh sumbu-y yang memanjang ke angka negatif. Review untuk aplikasi berbayar tidak menerima pesan negatif sesering aplikasi berbayar. Hal ini mengindikasikan sesuatu terkait dengan kualitas aplikasi, yang artinya: aplikasi berbayar memiliki kualitas yang lebih baik dibandingkan aplikasi gratis. Skor polaritas median untuk aplikasi berbayar agak lebih tinggi dibandingkan aplikasi gratis.\n\n# Memuat user_reviews.csv\nreviews_df = pd.read_csv('datasets/user_reviews.csv')\n\n# Menggabungkan kedua dataframe\nmerged_df = apps.merge(reviews_df)\n\n# Menghilangkan datum null dari kolom Sentiment dan Review\nmerged_df = merged_df.dropna(subset = ['Sentiment', 'Review'])\n\nsns.set_style('ticks')\nfig, ax = plt.subplots()\nfig.set_size_inches(11, 8)\n\n# Polaritas sentimen review pengguna untuk aplikasi berbayar vs. aplikasi gratis\nax = sns.boxplot(x = 'Type', y = 'Sentiment_Polarity', data = merged_df)\nax.set_title('Distribusi Polaritas Sentimen')\n\n# Menampilkan plot\nplt.show()\n\n\n\n\nDalam tulisan ini, kita telah menganalisa sekitar sepuluh ribu aplikasi dari Google Play Store. Kita dapat menggunakan penemuan ini untuk memberikan informasi terkait keputusan apakah kita perlu untuk membuat aplikasi kita sendiri.\n\n\n\n\n\n\nImportant\n\n\n\nTulisan ini adalah salah satu hasil kerja saya dalam career path Data Scientist with Python di Datacamp.\n\n\nSalam Maria, penuh rahmat, Tuhan sertamu."
  },
  {
    "objectID": "posts/Transjakarta/TransjakartaR.html",
    "href": "posts/Transjakarta/TransjakartaR.html",
    "title": "Statistik Penumpang Transportasi Jakarta Tahun 2021",
    "section": "",
    "text": "Bus Rapid Transit Transjakarta"
  },
  {
    "objectID": "posts/Transjakarta/TransjakartaR.html#transjakarta-moda-transportasinya-orang-jakarta",
    "href": "posts/Transjakarta/TransjakartaR.html#transjakarta-moda-transportasinya-orang-jakarta",
    "title": "Statistik Penumpang Transportasi Jakarta Tahun 2021",
    "section": "Transjakarta, Moda Transportasinya Orang Jakarta",
    "text": "Transjakarta, Moda Transportasinya Orang Jakarta\nTransjakarta merupakan sistem transportasi publik utama di Jakarta. Selain karena harganya yang sangat terjangkau, Transjakarta menjadi moda transportasi favorit masyarakat karena ia menjangkau sebagian besar wilayah di Provinsi Daerah Khusus Ibukota Jakarta. Pertama kali beroperasi di Jakarta pada tahun 2004 dengan trayek Koridor 1: Blok M - Kota, kini Transjakarta telah memiliki lebih dari 100 trayek yang melayani kebutuhan transportasi masyarakat ibukota. Seberapa besar masyarakat menggunakan moda transportasi ini? Mari kita mencari tahu melalui analisis data berikut ini.\n\n# Memuat library\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\nlibrary(ggthemes)\nlibrary(tidyverse)\n\n── Attaching packages\n───────────────────────────────────────\ntidyverse 1.3.2 ──\n\n\n✔ tibble  3.1.8     ✔ purrr   0.3.5\n✔ tidyr   1.2.1     ✔ stringr 1.4.1\n✔ readr   2.1.3     ✔ forcats 0.5.2\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(dygraphs)\nlibrary(scales)\n\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor"
  },
  {
    "objectID": "posts/Transjakarta/TransjakartaR.html#jakarta-open-data",
    "href": "posts/Transjakarta/TransjakartaR.html#jakarta-open-data",
    "title": "Statistik Penumpang Transportasi Jakarta Tahun 2021",
    "section": "Jakarta Open Data",
    "text": "Jakarta Open Data\nDatasets di bawah ini berisi Data Penumpang Bus Transjakarta Tahun 2021, yang didapatkan dari Jakarta Open Data, Dinas Perhubungan Provinsi DKI Jakarta. Dataset dibuat pada 12 April 2022 dan memiliki frekuensi penerbitan satu bulan sekali. Untuk mendapatkan data tahunan, maka diperlukan penyatuan 12 data bulanan.\n\n# Memuat dataset bulanan\njan2021 <- read.csv(\"datasets/data-penumpang-bus-transjakarta-januari-2021.csv\")\nfeb2021 = read.csv(\"datasets/data-penumpang-bus-transjakarta-februari-2021.csv\")\nmar2021 = read.csv(\"datasets/data-penumpang-bus-transjakarta-maret-2021.csv\")\napr2021 <- read.csv(\"datasets/data-penumpang-bus-transjakarta-april-2021.csv\")\nmei2021 <- read.csv(\"datasets/data-penumpang-bus-transjakarta-mei-2021.csv\")\njun2021 <- read.csv(\"datasets/data-penumpang-bus-transjakarta-juni-2021.csv\")\njul2021 <- read.csv(\"datasets/data-penumpang-bus-transjakarta-juli-2021.csv\")\nagu2021 <- read.csv(\"datasets/data-penumpang-bus-transjakarta-agustus-2021.csv\")\nsep2021 <- read.csv(\"datasets/data-penumpang-bus-transjakarta-september-2021.csv\")\nokt2021 <- read.csv(\"datasets/data-penumpang-bus-transjakarta-oktober-2021.csv\")\nnov2021 <- read.csv(\"datasets/data-penumpang-bus-transjakarta-november-2021.csv\")\ndes2021 <- read.csv(\"datasets/data-penumpang-bus-transjakarta-desember-2021.csv\")\n\n\n# Membuat dataset tahunan\ntj2021 <- rbind(jan2021, feb2021, mar2021, apr2021, mei2021, jun2021, jul2021, agu2021, sep2021, okt2021, nov2021, des2021)\n\n# Menampilkan 5 baris pertama tj2021\nhead(tj2021, 5)\n\n\n\n  \n\n\n\nDalam dataset ini terdapat beberapa kesalahan ketik dan input yang menyebabkan proses analisis data tidak berjalan sempurna. Maka dari itu, diperlukan pembenaran data seperti yang sudah dilakukan pada kotak kode di bawah ini. Selain melakukan proses data cleaning, juga dilakukan proses menambah kolom nama_bulan dengan cara mengambil abreviasi 12 angka bulan dalam datasets tersebut.\n\n# Membenarkan data saltik\ntj2021$trayek <- gsub(\"Ggadung\", \"Gadung\", tj2021$trayek)\ntj2021$trayek <- gsub(\"Ttanjung\", \"Tanjung\", tj2021$trayek)\ntj2021$trayek <- gsub(\"Ppulo\", \"Pulo\", tj2021$trayek)\ntj2021$trayek <- gsub(\"PIK - Balai Kota\", \"Pantai Maju - Balai Kota\", tj2021$trayek)\ntj2021$trayek <- gsub(\"Pinang Ranti - Kampung Rambutan\", \"Kampung Rambutan - Pinang Ranti\", tj2021$trayek)\ntj2021$trayek <- gsub(\"Gondangdia - Cikini via Kramat Jaya\", \"Gondangdia - Cikini via Kramat Raya\", tj2021$trayek)\n\n# Membenarkan kode trayek\ntj2021$kode_trayek[tj2021$trayek == \"Pantai Maju - Balai Kota\"] <- \"1A\"\ntj2021$kode_trayek[tj2021$trayek == \"Sentraland Cengkareng - Puri Kembangan\"] <- \"3E\"\ntj2021$kode_trayek[tj2021$trayek == \"Tanjung Priok - Jembatan Item\"] <- \"JAK.77\"\ntj2021$kode_trayek[tj2021$trayek == \"Cililitan - Condet via Kayu Manis\"] <- \"JAK.37\"\ntj2021$kode_trayek[tj2021$trayek == \"Kampung Rambutan - Pinang Ranti\"] <- \"JAK.71\"\ntj2021$kode_trayek[tj2021$trayek == \"Tongtek - Cililitan\"] <- \"JAK.43\"\ntj2021$kode_trayek[tj2021$trayek == \"Gondangdia - Cikini via Kramat Raya\"] <- \"JAK.10B\"\n\ntj2021$trayek[tj2021$kode_trayek == \"JAK.10A\"] <- \"Gondangdia - Cikini via Salemba Raya\"\ntj2021$trayek[tj2021$kode_trayek == \"JAK.10B\"] <- \"Gondangdia - Cikini via Kramat Raya\"\n\n# Mendapatkan nama bulan\ntj2021$nama_bulan <- month.abb[tj2021$bulan]\n\nSelain dataset dari Jakarta Open Data di atas, kami juga memuat dataset yang diambil dari transjakarta.co.id. Dataset tersebut adalah routes.csv yang berisi rincian trayek-trayek seluruh moda transportasi yang dikendalikan oleh PT. Transportasi Jakarta. Tetapi dalam dataset tersebut, kami hanya mengambil kolom route_color yang akan digunakan untuk warna bar chart yang mewakili trayek-trayek. Dataframe rute dan tj2021 dapat disatukan dengan menggunakan kunci berupa kode_trayek yang ada di kedua datasets tersebut.\n\n# Memuat data rute\nrute <- read.csv('datasets/routes.csv') \n# Hanya mengambil data yang diinginkan\nwarna_rute <- rute %>%\n  select(route_id, route_color) %>%\n  rename(kode_trayek = route_id)\nwarna_rute$route_color <- sub(\"^\", \"#\", warna_rute$route_color)\n\n#warna_rute <- merge(x=warna_rute, y=tj2021[ , c(\"kode_trayek\", \"trayek\")], by=\"kode_trayek\", all.x = TRUE)\n#warna_rute <- warna_rute[!duplicated(warna_rute$kode_trayek), ]\n#row.names(warna_rute) <- NULL\n\n# Menghubungkan dataset\ntj2021$kode_trayek <- factor(tj2021$kode_trayek, levels = warna_rute$kode_trayek)"
  },
  {
    "objectID": "posts/Transjakarta/TransjakartaR.html#apa-trayek-yang-dilayani-oleh-transjakarta",
    "href": "posts/Transjakarta/TransjakartaR.html#apa-trayek-yang-dilayani-oleh-transjakarta",
    "title": "Statistik Penumpang Transportasi Jakarta Tahun 2021",
    "section": "Apa Trayek yang Dilayani oleh Transjakarta?",
    "text": "Apa Trayek yang Dilayani oleh Transjakarta?\nSetelah melalui proses pembersihan data di atas, dan penggabungan datasets, proses selanjutnya adalah menghitung jumlah_penumpang per trayek per tahun. Kode di bawah mengikutsertakan kode_trayek agar memudahkan proses pemberian warna pada plot.\n\n# Mendapatkan jumlah total per trayek per tahun\njmltrayek2021 <- tj2021 %>%\n  group_by(kode_trayek, trayek, jenis) %>%\n  summarize(jumlah_penumpang = sum(jumlah_penumpang))\n\n`summarise()` has grouped output by 'kode_trayek', 'trayek'. You can override\nusing the `.groups` argument.\n\njmltrayek2021\n\n\n\n  \n\n\n\n\nBus Rapid Transit (BRT)\nDari tabel di atas kita mengetahui bahwa ada 134 baris data yang masing-masing berisi tentang rincian per trayek selama tahun 2021. Maka dari itu, dapat diketahui bahwa Transjakarta melayani 134 trayek yang beroperasi di seluruh DKI Jakarta. Luar Biasa!. Tetapi, masyarakat awam umumnya menganggap bahwa yang dimaksud dengan ‘Transjakarta’ adalah trayek bus yang memiliki jalurnya tersendiri di jalanan, atau biasa disebut ‘busway’. Transjakarta dan Dinas Perhubungan sendiri mengkategorikan hal itu sebagai ‘Bus Rapid Transit’ atau disingkat BRT.\n\n\n\nBRT Transjakarta; Scania K340IA Euro 6\n\n\nLalu, seberapa banyak masyarakat Jakarta yang menggunakan busway? Trayek apa saja yang dikategorikan sebagai BRT? Pertanyaan tersebut dapat dijawab dengan tabel di bawah ini:\n\n# Mendapatkan data jumlah penumpang BRT dalam setahun\nbrt2021 <- jmltrayek2021 %>%\n  filter(jenis == 'BRT') %>%\n  select(kode_trayek, trayek, jumlah_penumpang) %>%\n  arrange(desc(jumlah_penumpang))\nbrt2021\n\n\n\n  \n\n\n\nAda 13 trayek yang dilayani oleh BRT Transjakarta. Tentunya, data di atas akan lebih menarik jika disajikan dalam bentuk bar chart seperti di bawah ini:\n\n# Membuat plot brt2021\nggplot(brt2021, aes(x=reorder(kode_trayek, jumlah_penumpang), y=jumlah_penumpang)) +\n  geom_col(aes(fill=kode_trayek), show.legend = FALSE) +\n  geom_text(aes(label = paste(round(jumlah_penumpang / 1e6, 2), \"Juta\"))) +\n  labs(title=\"Jumlah Penumpang BRT Transjakarta 2021\",\n       subtitle=\"Berapa jumlah penumpang per trayek BRT Transjakarta?\",\n       x=NULL,\n       y=\"Jumlah Penumpang\") +\n  coord_flip() +\n  theme_fivethirtyeight() +\n  theme(axis.title = element_text()) +\n  scale_fill_manual(values = warna_rute$route_color) +\n  scale_x_discrete(breaks = brt2021$kode_trayek,\n    labels = brt2021$trayek) +\n  scale_y_continuous(labels = unit_format(unit = \"Jt\", scale = 1e-6))\n\n\n\n\nDari plot di atas dapat kita ketahui bahwa terdapat sekitar 50 juta pengguna BRT Transjakarta. Koridor 1: Blok M - Kota menjadi trayek dengan jumlah penumpang terbanyak, disusul dengan Koridor 9: Pinang Ranti - Pluit, dan Koridor 3: Kalideres - Pasar Baru. Hal ini dapat terjadi karena ketiga koridor tersebut melayani wilayah yang disebut sebagai ‘Segitiga Emas Jakarta’, yakni pusat kegiatan perkantoran dan keuangan di mana banyak orang Jakarta dan luar Jakarta yang bekerja di sana.\n\n\nAngkutan Umum Integrasi (AUT)\nSekarang mari kita mencari tahu data tentang Transjakarta jenis Angkutan Umum Integrasi. Angkutan Umum Integrasi adalah moda transportasi yang menjadi penghubung antara trayek BRT, atau menjadi cabang yang melayani wilayah yang tidak dilayani oleh BRT.\n\n\n\nBus Metrotrans di Senayan, salah satu moda transportasi berbasis Angkutan Umum Integrasi.\n\n\nBagaimana antusias masyarakat Jakarta dalam menggunakan AUT, tabel di bawah adalah data yang telah dikumpulkan sepanjang tahun 2021:\n\n# Mendapatkan data angkutan umum terintegrasi\naut2021 <- jmltrayek2021 %>%\n  filter(jenis == 'Angkutan Umum Integrasi') %>%\n  select(kode_trayek, trayek, jumlah_penumpang) %>%\n  arrange(desc(jumlah_penumpang))\naut2021\n\n\n\n  \n\n\n\nYap, ternyata AUT memiliki trayek yang lebih banyak dibandingkan dengan BRT. Hal ini terjadi karena jalur busway memerlukan lebar jalan yang luas, dan hanya segelintir jalanan di Jakarta yang bisa dipasangkan jalur busway. Oleh karenanya, AUT masih menggunakan jalan utama dan halte di pinggir jalan dalam hal antar jemput penumpang. Dengan ini, maka AUT lebih bisa menjangkau pemukiman/pusat kegiatan yang tidak memiliki jalanan luas yang memadai.\nGrafik di bawah adalah data jumlah penumpang AUT per tahun 2021:\n\n# Membuat plot jumlah penumpang angkutan umum integrasi\nggplot(aut2021, aes(x=reorder(trayek, jumlah_penumpang), y=jumlah_penumpang)) +\n  geom_col(aes(fill=trayek), show.legend = FALSE) +\n  geom_text(aes(label = paste(round(jumlah_penumpang / 1e3, 2), \"Rb\"))) +\n  labs(title = \"Jumlah Penumpang Angkutan Umum Integrasi 2021\",\n       x = NULL,\n       y = \"Jumlah Penumpang\") +\n  coord_flip() +\n  scale_fill_manual(values = warna_rute$route_color)\n\n\n\n\nMenurut Badan Pusat Statistik Jakarta 2021, jumlah angkutan umum berbasis bus kota (Bus Transjakarta) adalah 1680, di antara seluruh bus yang melayani DKI Jakarta yang berjumlah 6428 kendaraan. Jumlah ini mengalami penurunan 34,58 persen dibandingkan tahun 2020 yang berjumlah 9826 kendaraan.\n\n\nMikrotrans\nBerbeda dengan Bus Rapid Transit dan Angkutan Umum Integrasi yang menggunakan kendaraan bus, Mikrotrans adalah moda transportasi yang menggunakan minibus. Masyarakat Jakarta biasa menyebut moda transportasi ini sebagai ‘angkot’ atau ‘mikrolet’. Mikrotrans hadir sebagai solusi bagi masyarakat yang ingin bepergian ke tempat yang tidak dapat dijangkau oleh kendaraan besar, atau yang jumlah penggunanya sedikit.\n\n\n\nMikrotrans\n\n\nApakah kehadiran Mikrotrans dimanfaatkan oleh masyarakat Jakarta? Trayek apa saja yang dilayani Mikrotrans? Mari kita lihat datanya!\n\n# Mengambil data pengguna jumlah pengguna Mikrotrans\nmikro2021 <- jmltrayek2021 %>%\n  filter(jenis == 'Mikrotrans') %>%\n  select(kode_trayek, trayek, jumlah_penumpang) %>%\n  arrange(desc(jumlah_penumpang))\nmikro2021\n\n\n\n  \n\n\n\nMikrotrans memiliki trayek paling banyak dalam jenis transportasi Transjakarta. Tentunya hal ini disebabkan karena ukuran kendaraan yang kecil sehingga dapat menjangkau sebagian besar wilayah Jakarta yang memiliki lebar jalan yang tak luas. Selain itu, Mikrotrans juga menjangkau masyarakat mengengah ke bawah yang biasanya tinggal di jalan sempit, dan dengan tarif yang masih digratiskan oleh pemerintah Jakarta, menyebabkan Mikrotrans menjadi moda transportasi yang diminati oleh warga Jakarta.\n\n# Membuat plot Mikrotrans\nggplot(mikro2021, aes(x=reorder(trayek, jumlah_penumpang), y=jumlah_penumpang)) +\n  geom_col(aes(fill=trayek), show.legend = FALSE) +\n  geom_text(aes(label = paste(round(jumlah_penumpang / 1e3, 2), \"Rb\"))) +\n  labs(title = \"Jumlah Penumpang Mikrotrans per Tahun 2021\",\n       x = NULL,\n       y = \"Jumlah Penumpang\") +\n  coord_flip()"
  },
  {
    "objectID": "posts/Transjakarta/TransjakartaR.html#berapa-jumlah-penumpang-transjakarta-per-bulan-tahun-2021",
    "href": "posts/Transjakarta/TransjakartaR.html#berapa-jumlah-penumpang-transjakarta-per-bulan-tahun-2021",
    "title": "Statistik Penumpang Transportasi Jakarta Tahun 2021",
    "section": "Berapa Jumlah Penumpang Transjakarta per Bulan tahun 2021?",
    "text": "Berapa Jumlah Penumpang Transjakarta per Bulan tahun 2021?\nSebelumnya kita sudah mendapatkan statistik penggunaan Transjakarta di tahun 2021. Lalu bagaimana dengan jumlah penumpang per bulannya?\n\n# Mendapatkan jumlah penumpang per bulan\njmlbulan <- tj2021 %>%\n  group_by(bulan, nama_bulan, jenis) %>%\n  summarize(jumlah_penumpang = sum(jumlah_penumpang))\n\n`summarise()` has grouped output by 'bulan', 'nama_bulan'. You can override\nusing the `.groups` argument.\n\n\n\n# Membuat plot jmlbulan\nggplot(jmlbulan, aes(x=bulan, y=jumlah_penumpang, color = jenis)) +\n  geom_line(size = 1.5, alpha = 0.8) +\n  labs(title = \"Jumlah Penumpang Transjakarta per Bulan\",\n       subtitle = \"Berapa jumlah penumpang Transportasi Jakarta per jenis transportasi per bulan?\",\n       x = \"Bulan\",\n       y = \"Jumlah Penumpang\",\n       color = \"Jenis\") +\n  theme_fivethirtyeight() +\n  theme(axis.title = element_text()) +\n  scale_x_continuous(breaks = jmlbulan$bulan,\n    labels = jmlbulan$nama_bulan) +\n  scale_y_continuous(labels = unit_format(unit = \"Jt\", scale = 1e-6))\n\n\n\n\n\n# Membuat dataframe jmlbulan\njmlbulan_df <- data.frame(jmlbulan)\njmlbulan_df$bulan <- sub(\"^\", \"2021-\", jmlbulan_df$bulan)\njmlbulan_df$bulan <- paste0(jmlbulan_df$bulan, \"-1\")\njmlbulan_df$bulan <- as.Date(jmlbulan_df$bulan)\n\n# Mengubah bentuk dataframe\njmlbulan_df <- as.data.frame.matrix(xtabs(jumlah_penumpang~bulan+jenis, jmlbulan_df))\n\n\n# Membuat plot interaktif\ndygraph(jmlbulan_df, main = \"Jumlah Penumpang Transjakarta per Jenis Kendaraan 2021\", ylab = \"Jumlah Penumpang\")\n\n\n\n\n\nGrafik di atas menunjukkan bahwa terdapat penurunan penumpang secara drastis yang terjadi di bulan Juli 2021. Penurunan ini terjadi di seluruh jenis transportasi Transjakarta. Jika kalian tinggal di Jakarta dan sekitarnya, mungkin kalian ingat dengan wabah Covid-19 yang terjadi di bulan tersebut. Orang-orang yang terjangkit Covid-19 varian Delta mengalami kenaikan yang sangat pesat, yakni empat kali lipatnya dibandingkan dengan bulan Juni 2021.\nKematian akibat Covid-19 yang semakin meningkat setiap harinya menyebabkan pemerintah Indonesia menerapkan Pemberlakuan Pembatasan Kegiatan Masyarakat (PPKM) Darurat yang berlaku pada tanggal 2 hingga 25 Juli 2021. Salah satu kebijakan yang pemerintah ambil yakni pengetatan aktivitas, terutama menetapkan 100% kerja dari rumah untuk sektor nonesensial, dan pengaturan kapasitas maksimal 70% untuk transportasi umum."
  },
  {
    "objectID": "posts/Transjakarta/TransjakartaR.html#kesimpulan",
    "href": "posts/Transjakarta/TransjakartaR.html#kesimpulan",
    "title": "Statistik Penumpang Transportasi Jakarta Tahun 2021",
    "section": "Kesimpulan",
    "text": "Kesimpulan\n\ntotal_penumpang <- tj2021 %>%\n  group_by(jenis) %>%\n  summarize(jumlah_2021 = sum(jumlah_penumpang))\ntotal_penumpang\n\n\n\n  \n\n\n\nDari analisis di atas bisa kita ketahui bahwa moda transportasi berbasis BRT adalah yang paling diminati di Jakarta. Walau begitu, diterapkannya PPKM oleh pemerintah yang memaksa para pekerja yang berkantor di daerah Segitiga Emas Jakarta untuk bekerja di rumah menyebabkan penurunan drastis penggunaan transportasi BRT ini. Akan tetapi, penurunan drastis tidak begitu dirasakan oleh Mikrotrans. Hal ini disebabkan karena Mikrotrans biasanya menjadi penghubung satu daerah pemukiman dengan daerah pemukiman lain, tentunya mobilitas seperti ini akan selalu diperlukan oleh sebagian besar masyarakat Jakarta.\nSalam Maria, penuh rahmat, Tuhan sertamu."
  },
  {
    "objectID": "posts/Wisata Bandung/index.html",
    "href": "posts/Wisata Bandung/index.html",
    "title": "Destinasi Wisata di Kota Bandung - Part 1",
    "section": "",
    "text": "Bandung adalah ibukota Jawa Barat. Ia terletak di dataran tinggi yang telah dikenal oleh masyarakat sebagai Jawa Barat. Kondisi geografis ini menyebabkan Bandung memiliki berbagai tempat indah yang menarik wisatawan untuk dikunjungi.\nTetapi, pandemi Covid-19 yang terjadi pada awal 2020 telah membuat kunjungan wisatawan ke Bandung berkurang cukup drastis, yakni 50%.\n\nSumber: Disbudpar Bandung\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2013\n2014\n2015\n2016\n2017\n2018\n2019\n2020\n\n\n\n\nWisatawan Domestik\n5,388,292\n5,627,421\n5,877,162\n6,712,574\n6,770,610\n7,357,785\n8,175,221\n3,214,390\n\n\nWisatawan Mancanegara\n176,432\n180,143\n183,932\n186,948\n189,902\n227,560\n252,842\n30,210\n\n\nTotal\n5,564,724\n5,807,564\n6,061,094\n6,899,522\n6,960,512\n7,585,345\n8,428,063\n3,244,600\n\n\n\nSejumlah objek wisata di Bandung sudah mulai beroperasi pada Oktober 2021. Maka dari itu, diperlukan strategi khusus untuk mencari tahu cara terbaik apa yang dapat dilakukan untuk menggerakan pariwisata kembali."
  },
  {
    "objectID": "posts/Wisata Bandung/index.html#membaca-data",
    "href": "posts/Wisata Bandung/index.html#membaca-data",
    "title": "Destinasi Wisata di Kota Bandung - Part 1",
    "section": "Membaca Data",
    "text": "Membaca Data\nSebelum memulai analisis, mari kita mengimpor modul dan data yang diperlukan\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2)\n\n\n# Membaca data\nrating <- read.csv('Datasets/tourism_rating.csv')\nplace <- read.csv('Datasets/tourism_with_id.csv')\nuser <- read.csv('Datasets/user.csv')\n\n\na. Menyiapkan data\n\n# Membaca data place dan mem-filter id wisata Bandung\nplace_bandung <- place %>%\n  filter(City == \"Bandung\")\n\n# Menggabungkan data place dan id Bandung\nplace_rating <- rating %>% right_join(place_bandung['Place_Id'], by=\"Place_Id\")\nglimpse(place_rating)\n\nRows: 2,842\nColumns: 3\n$ User_Id       <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3,…\n$ Place_Id      <int> 312, 258, 292, 222, 246, 265, 328, 307, 302, 328, 322, 2…\n$ Place_Ratings <int> 2, 5, 3, 3, 4, 5, 2, 4, 2, 2, 4, 2, 3, 3, 5, 5, 3, 3, 2,…\n\n\n\n# Mengubah data user agar hanya berisi user yang pernah mengunjungi Bandung\n\nuser_bandung <- user %>% right_join(place_rating['User_Id'], by=\"User_Id\")\nuser_bandung_dr <- user_bandung[!duplicated(user_bandung$User_Id), ] %>%\n  arrange(desc(User_Id))\nglimpse(user_bandung_dr)\n\nRows: 300\nColumns: 3\n$ User_Id  <int> 300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 2…\n$ Location <chr> \"Ponorogo, Jawa Timur\", \"Sragen, Jawa Tengah\", \"Bogor, Jawa B…\n$ Age      <int> 26, 27, 38, 39, 31, 31, 28, 34, 29, 25, 34, 35, 30, 27, 35, 2…"
  },
  {
    "objectID": "posts/Wisata Bandung/index.html#b.-eksplorasi-data",
    "href": "posts/Wisata Bandung/index.html#b.-eksplorasi-data",
    "title": "Destinasi Wisata di Kota Bandung - Part 1",
    "section": "b. Eksplorasi Data",
    "text": "b. Eksplorasi Data\n\n# Membuat dataframe berisi lokasi dengan jumlah rating terbanyak\ntop_10 <- place_rating %>%\n  count(Place_Id, sort=TRUE) %>%\n  right_join(place_bandung[, c('Place_Id', 'Place_Name')], by=\"Place_Id\") %>%\n  head(10)\n\n# Membuat visualisasi wisata dengan jumlah 10 rating terbanyak\nggplot(top_10, aes(x=reorder(Place_Name, n), y=n)) +\n  geom_col(aes(fill=Place_Name), show.legend = FALSE) +\n  labs(x=\"Lokasi wisata\",\n       y=\"Jumlah rating\",\n       title=\"Jumlah Tempat Wisata dengan Rating Terbanyak\") +\n  coord_flip()\n\n\n\n\n\n# Menghitung jumlah kategori tempat wisata di Bandung\ncount_category <- place_bandung %>%\n  count(Category, sort = TRUE)\n\n# Membuat visualisasi jumlah kategori wisata di Kota Bandung\nggplot(count_category, aes(x=reorder(Category, n), y=n)) +\n  geom_col(aes(fill=Category), show.legend = FALSE) +\n  labs(x=\"Jenis Wisata\",\n       y=\"Jumlah\",\n       title=\"Jumlah Jenis Wisata di Kota Bandung\") +\n  scale_fill_viridis_d(\"viridis\") +\n  coord_flip()\n\n\n\n\n\n# Membuat visualisasi distribusi usia user\nggplot(user_bandung_dr, aes(x=Age)) +\n  geom_boxplot()\n\n\n\n\n\n# Membuat visualisasi distribusi harga masuk tempat wisata\nggplot(place_bandung, aes(x=Price)) +\n  geom_boxplot()\n\n\n\n\n\n# Memfilter asal kota user\naskot <- user_bandung %>%\n  count(Location, sort = TRUE)\n\n# Membuat visualisasi asal kota user\nggplot(askot, aes(x=reorder(Location, n), y=n)) +\n  geom_col(aes(fill=Location), show.legend = FALSE) +\n  labs(x=\"Asal Kota\",\n       y=\"Jumlah\",\n       title=\"Jumlah Asal Kota User\") +\n  coord_flip()"
  }
]